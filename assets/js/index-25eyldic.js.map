{"version":3,"mappings":"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","names":["props","__props","emit","__emit","dialogVisible","value","loading","uploading","sourceMapFile","parsedStack","hasParsedStack","newError","errorObj","stackFrames","ErrorStackParser.parse","frame","e","handleFileChange","uploadFile","parseSourceMap","fileContent","readFileAsText","consumer","sourceMap.SourceMapConsumer","newParsedStack","originalPosition","error","file","resolve","reject","reader","formatFilePath","path","parts","handleClose","playerContainer","playerInstance","hasRrwebData","_a","newVal","initPlayer","rrwebPlayer","n","Replayer","hasBehaviorStack","behaviorStack","a","b","getBehaviorTagType","type","getBehaviorIcon","Mouse","Edit","Link","Operation","Document","Pointer","Refresh","Calendar","formatBehaviorTime","timestamp","getBehaviorDetail","behavior","event","errorData","img"],"ignoreList":[],"sources":["../../../src/views/demo/components/ErrorDetailDialog.vue","../../../src/views/demo/components/RrwebPlayerDialog.vue","../../../src/views/demo/components/BehaviorStackDialog.vue","../../../src/views/demo/index.vue"],"sourcesContent":["<template>\n\t<el-dialog\n\t\ttitle=\"错误详情\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"error-detail-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<div v-if=\"error\" class=\"error-detail-content\">\n\t\t\t\t<!-- 错误基本信息 -->\n\t\t\t\t<el-descriptions title=\"错误信息\" :column=\"1\" border>\n\t\t\t\t\t<el-descriptions-item label=\"错误类型\">{{ error.type }}</el-descriptions-item>\n\t\t\t\t\t<el-descriptions-item label=\"错误消息\">{{ error.message }}</el-descriptions-item>\n\t\t\t\t\t<el-descriptions-item label=\"发生时间\">{{ error.timestamp }}</el-descriptions-item>\n\t\t\t\t</el-descriptions>\n\n\t\t\t\t<!-- 错误堆栈 -->\n\t\t\t\t<div class=\"stack-section\">\n\t\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t\t<h3>错误堆栈</h3>\n\t\t\t\t\t\t<div v-if=\"!hasParsedStack\" class=\"upload-sourcemap\">\n\t\t\t\t\t\t\t<el-upload\n\t\t\t\t\t\t\t\tclass=\"sourcemap-uploader\"\n\t\t\t\t\t\t\t\taction=\"#\"\n\t\t\t\t\t\t\t\t:auto-upload=\"false\"\n\t\t\t\t\t\t\t\t:limit=\"1\"\n\t\t\t\t\t\t\t\taccept=\".map,.json\"\n\t\t\t\t\t\t\t\t:on-change=\"handleFileChange\">\n\t\t\t\t\t\t\t\t<el-button type=\"primary\" :loading=\"uploading\">选择SourceMap文件</el-button>\n\t\t\t\t\t\t\t\t<template #tip>\n\t\t\t\t\t\t\t\t\t<div class=\"el-upload__tip\">请上传.map格式的SourceMap文件</div>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</el-upload>\n\n\t\t\t\t\t\t\t<el-button type=\"success\" :disabled=\"!sourceMapFile\" :loading=\"uploading\" @click=\"parseSourceMap\">\n\t\t\t\t\t\t\t\t解析源码\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- 解析后的堆栈 -->\n\t\t\t\t\t<div v-if=\"hasParsedStack\" class=\"parsed-stack\">\n\t\t\t\t\t\t<div v-for=\"(frame, index) in parsedStack\" :key=\"index\" class=\"stack-frame\">\n\t\t\t\t\t\t\t<div class=\"frame-number\">{{ index + 1 }}</div>\n\t\t\t\t\t\t\t<div class=\"frame-content\">\n\t\t\t\t\t\t\t\t<div class=\"frame-function\">{{ frame.func || '(匿名函数)' }}</div>\n\t\t\t\t\t\t\t\t<div class=\"frame-location\">\n\t\t\t\t\t\t\t\t\t<span class=\"file-link\">{{ formatFilePath(frame.file) }}</span>\n\t\t\t\t\t\t\t\t\t<span class=\"line-column\">:{{ frame.line }}:{{ frame.column }}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- 原始堆栈 -->\n\t\t\t\t\t<div v-else class=\"original-stack\">\n\t\t\t\t\t\t<pre>{{ error.stack }}</pre>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div v-else class=\"error-empty\">\n\t\t\t\t<el-empty description=\"无错误详情数据\" />\n\t\t\t</div>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport type { UploadFile } from 'element-plus'\nimport * as ErrorStackParser from 'error-stack-parser'\nimport * as sourceMap from 'source-map-js'\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 加载状态\nconst loading = ref(false)\nconst uploading = ref(false)\n\n// SourceMap文件\nconst sourceMapFile = ref<UploadFile | null>(null)\n\n// 解析后的堆栈\nconst parsedStack = ref<\n\tArray<{\n\t\tfile: string\n\t\tline: number\n\t\tcolumn: number\n\t\tfunc: string\n\t}>\n>([])\n\n// 是否有解析后的堆栈\nconst hasParsedStack = computed(() => {\n\treturn parsedStack.value && parsedStack.value.length > 0\n})\n\n// 监听错误变化\nwatch(\n\t() => props.error,\n\tnewError => {\n\t\tif (newError) {\n\t\t\t// 如果错误对象中已有解析后的堆栈，直接使用\n\t\t\tif (newError.parsedStack && newError.parsedStack.length > 0) {\n\t\t\t\tparsedStack.value = newError.parsedStack\n\t\t\t} else {\n\t\t\t\t// 否则尝试使用ErrorStackParser解析\n\t\t\t\ttry {\n\t\t\t\t\t// 创建一个Error对象，设置message和stack\n\t\t\t\t\tconst errorObj = new Error(newError.message)\n\t\t\t\t\terrorObj.stack = newError.stack\n\n\t\t\t\t\t// 使用ErrorStackParser解析堆栈\n\t\t\t\t\tconst stackFrames = ErrorStackParser.parse(errorObj)\n\n\t\t\t\t\t// 转换为我们需要的格式\n\t\t\t\t\tparsedStack.value = stackFrames.map((frame: any) => ({\n\t\t\t\t\t\tfile: frame.fileName || '',\n\t\t\t\t\t\tline: frame.lineNumber || 0,\n\t\t\t\t\t\tcolumn: frame.columnNumber || 0,\n\t\t\t\t\t\tfunc: frame.functionName || '(匿名函数)',\n\t\t\t\t\t}))\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('解析错误堆栈失败:', e)\n\t\t\t\t\tparsedStack.value = []\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{ immediate: true },\n)\n\n// 处理文件选择变化\nconst handleFileChange = (uploadFile: UploadFile) => {\n\tsourceMapFile.value = uploadFile\n}\n\n// 解析SourceMap\nconst parseSourceMap = async () => {\n\tif (!sourceMapFile.value || !sourceMapFile.value.raw) {\n\t\tElMessage.warning('请先选择SourceMap文件')\n\t\treturn\n\t}\n\n\tif (!props.error || !props.error.stack) {\n\t\tElMessage.warning('错误堆栈信息不存在')\n\t\treturn\n\t}\n\n\ttry {\n\t\tuploading.value = true\n\n\t\t// 读取SourceMap文件内容\n\t\tconst fileContent = await readFileAsText(sourceMapFile.value.raw as File)\n\n\t\t// 解析SourceMap\n\t\tconst consumer = new sourceMap.SourceMapConsumer(JSON.parse(fileContent))\n\n\t\t// 使用SourceMap解析原始堆栈\n\t\tconst newParsedStack: Array<{\n\t\t\tfile: string\n\t\t\tline: number\n\t\t\tcolumn: number\n\t\t\tfunc: string\n\t\t}> = []\n\n\t\tfor (const frame of parsedStack.value as Array<{\n\t\t\tfile: string\n\t\t\tline: number\n\t\t\tcolumn: number\n\t\t\tfunc: string\n\t\t}>) {\n\t\t\ttry {\n\t\t\t\tconst originalPosition = consumer.originalPositionFor({\n\t\t\t\t\tline: frame.line,\n\t\t\t\t\tcolumn: frame.column,\n\t\t\t\t})\n\n\t\t\t\tif (originalPosition.source) {\n\t\t\t\t\tnewParsedStack.push({\n\t\t\t\t\t\tfile: originalPosition.source,\n\t\t\t\t\t\tline: originalPosition.line || 0,\n\t\t\t\t\t\tcolumn: originalPosition.column || 0,\n\t\t\t\t\t\tfunc: originalPosition.name || frame.func,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// 如果无法解析，保留原始信息\n\t\t\t\t\tnewParsedStack.push(frame)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('解析堆栈帧失败:', e)\n\t\t\t\tnewParsedStack.push(frame)\n\t\t\t}\n\t\t}\n\n\t\t// 更新解析后的堆栈\n\t\tparsedStack.value = newParsedStack\n\n\t\tElMessage.success('SourceMap解析成功')\n\t} catch (error) {\n\t\tconsole.error('解析SourceMap失败:', error)\n\t\tElMessage.error('解析SourceMap失败')\n\t} finally {\n\t\tuploading.value = false\n\t}\n}\n\n// 读取文件内容为文本\nconst readFileAsText = (file: File): Promise<string> => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.onload = () => resolve(reader.result as string)\n\t\treader.onerror = reject\n\t\treader.readAsText(file)\n\t})\n}\n\n// 格式化文件路径，提取文件名\nconst formatFilePath = (path: string) => {\n\tif (!path) return '(未知文件)'\n\tconst parts = path.split('/')\n\treturn parts[parts.length - 1]\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n\tsourceMapFile.value = null\n}\n</script>\n\n<style scoped>\n.error-detail-content {\n\tpadding: 10px;\n}\n\n.stack-section {\n\tmargin-top: 20px;\n}\n\n.section-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin-bottom: 15px;\n}\n\n.upload-sourcemap {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 10px;\n}\n\n.original-stack {\n\tbackground-color: #f5f7fa;\n\tpadding: 15px;\n\tborder-radius: 4px;\n\toverflow-x: auto;\n\tmax-height: 300px;\n}\n\n.parsed-stack {\n\tbackground-color: #f5f7fa;\n\tborder-radius: 4px;\n\toverflow-x: auto;\n\tmax-height: 300px;\n}\n\n.stack-frame {\n\tdisplay: flex;\n\tpadding: 8px 15px;\n\tborder-bottom: 1px solid #ebeef5;\n}\n\n.stack-frame:last-child {\n\tborder-bottom: none;\n}\n\n.frame-number {\n\twidth: 30px;\n\tcolor: #909399;\n\tfont-weight: bold;\n}\n\n.frame-content {\n\tflex: 1;\n}\n\n.frame-function {\n\tfont-weight: bold;\n\tmargin-bottom: 5px;\n}\n\n.frame-location {\n\tcolor: #606266;\n}\n\n.file-link {\n\tcolor: #409eff;\n}\n\n.line-column {\n\tcolor: #f56c6c;\n}\n</style>\n","<template>\n\t<el-dialog\n\t\ttitle=\"错误录屏回放\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"rrweb-player-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 有录屏数据 -->\n\t\t\t<template v-if=\"hasRrwebData\">\n\t\t\t\t<div class=\"player-container-wrapper\">\n\t\t\t\t\t<div ref=\"playerContainer\" class=\"player-container\"></div>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<!-- 无录屏数据 -->\n\t\t\t<template v-else-if=\"!loading\">\n\t\t\t\t<el-empty description=\"暂无会话录屏数据\">\n\t\t\t\t\t<template #description>\n\t\t\t\t\t\t<p>该错误事件未包含会话录屏数据</p>\n\t\t\t\t\t\t<p class=\"empty-tip\">提示: 确保SDK配置中启用了rrweb插件，并设置了适当的录制模式</p>\n\t\t\t\t\t</template>\n\t\t\t\t</el-empty>\n\t\t\t</template>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onUnmounted } from 'vue'\nimport { ElMessage } from 'element-plus'\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 播放器容器\nconst playerContainer = ref<HTMLElement | null>(null)\n\n// 播放器实例\nconst playerInstance = ref<any>(null)\n\n// 加载状态\nconst loading = ref(false)\n\n// 是否有录屏数据\nconst hasRrwebData = computed(() => {\n\treturn props.error?.rrwebData && props.error.rrwebData.length > 0\n})\n\n// 监听对话框可见性变化\nwatch(\n\t() => dialogVisible.value,\n\tasync newVal => {\n\t\tif (newVal && hasRrwebData.value) {\n\t\t\tloading.value = true\n\t\t\ttry {\n\t\t\t\t// 等待DOM更新\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\n\t\t\t\tawait initPlayer()\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('初始化播放器失败:', error)\n\t\t\t\tElMessage.error('初始化播放器失败')\n\t\t\t} finally {\n\t\t\t\tloading.value = false\n\t\t\t}\n\t\t}\n\t},\n)\n\n// 初始化播放器\nconst initPlayer = async () => {\n\tif (!hasRrwebData.value || !playerContainer.value || !props.error) return\n\n\ttry {\n\t\t// 动态导入rrweb-player\n\t\tconst rrwebPlayer = await import('rrweb-player')\n\t\t// 导入CSS\n\t\tawait import('rrweb-player/dist/style.css')\n\n\t\tconst Replayer = rrwebPlayer.default\n\n\t\t// 销毁旧的播放器实例\n\t\tif (playerInstance.value) {\n\t\t\tplayerInstance.value.destroy()\n\t\t\tplayerInstance.value = null\n\t\t}\n\n\t\t// 创建新的播放器实例\n\t\tplayerInstance.value = new Replayer({\n\t\t\ttarget: playerContainer.value,\n\t\t\tprops: {\n\t\t\t\tevents: props.error.rrwebData,\n\t\t\t\tshowController: true,\n\t\t\t\tautoPlay: false,\n\t\t\t\twidth: playerContainer.value.clientWidth,\n\t\t\t\theight: Math.min(window.innerHeight * 0.6, 600),\n\t\t\t},\n\t\t})\n\n\t\tconsole.log('rrweb播放器初始化成功')\n\t} catch (error) {\n\t\tconsole.error('初始化rrweb播放器失败:', error)\n\t\tthrow error\n\t}\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n\n\t// 销毁播放器实例\n\tif (playerInstance.value) {\n\t\tplayerInstance.value.destroy()\n\t\tplayerInstance.value = null\n\t}\n}\n\n// 组件卸载时清理资源\nonUnmounted(() => {\n\tif (playerInstance.value) {\n\t\tplayerInstance.value.destroy()\n\t\tplayerInstance.value = null\n\t}\n})\n</script>\n\n<style scoped>\n.player-container-wrapper {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\tmargin: 20px 0;\n}\n\n.player-container {\n\twidth: 100%;\n\tmin-height: 400px;\n}\n\n.empty-tip {\n\tcolor: #909399;\n\tfont-size: 14px;\n\tmargin-top: 10px;\n}\n</style>\n","<template>\n\t<el-dialog\n\t\ttitle=\"用户行为记录\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"behavior-stack-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 有行为栈数据 -->\n\t\t\t<template v-if=\"hasBehaviorStack\">\n\t\t\t\t<el-timeline>\n\t\t\t\t\t<el-timeline-item\n\t\t\t\t\t\tv-for=\"(behavior, index) in behaviorStack\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t:type=\"getBehaviorTagType(behavior.type)\"\n\t\t\t\t\t\t:icon=\"getBehaviorIcon(behavior.type)\"\n\t\t\t\t\t\t:timestamp=\"formatBehaviorTime(behavior.timestamp)\"\n\t\t\t\t\t\tsize=\"large\">\n\t\t\t\t\t\t<div class=\"behavior-item\">\n\t\t\t\t\t\t\t<div class=\"behavior-type\">\n\t\t\t\t\t\t\t\t<el-tag size=\"small\" :type=\"getBehaviorTagType(behavior.type)\">{{ behavior.type }}</el-tag>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"behavior-detail\">{{ getBehaviorDetail(behavior) }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</el-timeline-item>\n\t\t\t\t</el-timeline>\n\t\t\t</template>\n\n\t\t\t<!-- 无行为栈数据 -->\n\t\t\t<template v-else-if=\"!loading\">\n\t\t\t\t<el-empty description=\"暂无用户行为记录\">\n\t\t\t\t\t<template #description>\n\t\t\t\t\t\t<p>该错误事件未包含用户行为记录</p>\n\t\t\t\t\t\t<p class=\"empty-tip\">提示: 确保SDK配置中启用了behaviorStack插件</p>\n\t\t\t\t\t</template>\n\t\t\t\t</el-empty>\n\t\t\t</template>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { Calendar, Mouse, Link, Document, Operation, Pointer, Refresh, Edit } from '@element-plus/icons-vue'\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 加载状态\nconst loading = ref(false)\n\n// 是否有行为栈数据\nconst hasBehaviorStack = computed(() => {\n\treturn props.error?.behaviorStack && props.error.behaviorStack.length > 0\n})\n\n// 行为栈数据，按时间倒序排列\nconst behaviorStack = computed(() => {\n\tif (!hasBehaviorStack.value || !props.error) return []\n\n\treturn [...props.error.behaviorStack].sort((a, b) => b.timestamp - a.timestamp)\n})\n\n// 获取行为类型对应的标签类型\nconst getBehaviorTagType = (type: string) => {\n\tconst typeMap: Record<string, string> = {\n\t\tclick: 'primary',\n\t\tinput: 'success',\n\t\tnavigation: 'warning',\n\t\tapi: 'danger',\n\t\tpageview: 'info',\n\t\tscroll: '',\n\t\tresize: '',\n\t\tkeypress: 'success',\n\t\terror: 'danger',\n\t}\n\n\treturn typeMap[type] || ''\n}\n\n// 获取行为类型对应的图标\nconst getBehaviorIcon = (type: string) => {\n\tconst iconMap: Record<string, any> = {\n\t\tclick: Mouse,\n\t\tinput: Edit,\n\t\tnavigation: Link,\n\t\tapi: Operation,\n\t\tpageview: Document,\n\t\tscroll: Pointer,\n\t\tresize: Refresh,\n\t\tkeypress: Edit,\n\t\terror: 'CircleClose',\n\t}\n\n\treturn iconMap[type] || Calendar\n}\n\n// 格式化行为时间\nconst formatBehaviorTime = (timestamp: number) => {\n\tif (!timestamp) return ''\n\n\tconst date = new Date(timestamp)\n\treturn date.toLocaleString()\n}\n\n// 获取行为详情\nconst getBehaviorDetail = (behavior: any) => {\n\tswitch (behavior.type) {\n\t\tcase 'click':\n\t\t\treturn `点击了 ${behavior.element || '元素'} ${behavior.text ? `\"${behavior.text}\"` : ''} ${\n\t\t\t\tbehavior.position ? `位置(${behavior.position.x}, ${behavior.position.y})` : ''\n\t\t\t}`\n\t\tcase 'input':\n\t\t\treturn `在 ${behavior.element || '输入框'} 中输入内容`\n\t\tcase 'navigation':\n\t\t\treturn `从 ${behavior.from || '未知页面'} 导航到 ${behavior.to || '未知页面'}`\n\t\tcase 'api':\n\t\t\treturn `${behavior.method || 'GET'} 请求 ${behavior.url || '未知接口'} ${\n\t\t\t\tbehavior.status ? `状态码: ${behavior.status}` : ''\n\t\t\t}`\n\t\tcase 'pageview':\n\t\t\treturn `访问页面 ${behavior.url || '未知页面'} ${behavior.title ? `\"${behavior.title}\"` : ''}`\n\t\tcase 'scroll':\n\t\t\treturn `滚动到位置 ${behavior.position ? `(${behavior.position.x}, ${behavior.position.y})` : '未知位置'}`\n\t\tcase 'keypress':\n\t\t\treturn `按键 ${behavior.key || '未知按键'}`\n\t\tcase 'error':\n\t\t\treturn `发生错误: ${behavior.message || '未知错误'}`\n\t\tdefault:\n\t\t\treturn JSON.stringify(behavior)\n\t}\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n}\n</script>\n\n<style scoped>\n.behavior-item {\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n}\n\n.behavior-type {\n\tmargin-bottom: 5px;\n}\n\n.behavior-detail {\n\tcolor: #606266;\n}\n\n.empty-tip {\n\tcolor: #909399;\n\tfont-size: 14px;\n\tmargin-top: 10px;\n}\n</style>\n","<template>\n\t<div class=\"demo-container\">\n\t\t<el-card class=\"demo-card\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<h2>错误采集和还原定位演示</h2>\n\t\t\t\t\t<p class=\"description\">\n\t\t\t\t\t\t本页面用于演示前端监控SDK的错误采集和还原定位功能，包括sourcemap定位源码、播放录屏和记录用户行为记录。\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<!-- 错误触发区域 -->\n\t\t\t<div class=\"error-trigger-section\">\n\t\t\t\t<h3>触发错误</h3>\n\t\t\t\t<p>点击下方按钮触发不同类型的错误，错误将被自动捕获并显示在下方列表中。</p>\n\n\t\t\t\t<div class=\"error-buttons\">\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerTypeError\">触发类型错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerReferenceError\">触发引用错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerSyntaxError\">触发语法错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerPromiseError\">触发Promise错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerResourceError\">触发资源加载错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerCustomError\">触发自定义错误</el-button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- 错误列表区域 -->\n\t\t\t<div class=\"error-list-section\">\n\t\t\t\t<h3>错误列表</h3>\n\n\t\t\t\t<el-table v-if=\"errorList.length\" :data=\"errorList\" style=\"width: 100%\" border>\n\t\t\t\t\t<el-table-column prop=\"timestamp\" label=\"时间\" width=\"180\" />\n\t\t\t\t\t<el-table-column prop=\"type\" label=\"错误类型\" width=\"150\" />\n\t\t\t\t\t<el-table-column prop=\"message\" label=\"错误信息\" />\n\t\t\t\t\t<el-table-column label=\"操作\" width=\"300\">\n\t\t\t\t\t\t<template #default=\"scope\">\n\t\t\t\t\t\t\t<el-button size=\"small\" @click=\"showErrorDetail(scope.row)\">错误详情</el-button>\n\t\t\t\t\t\t\t<el-button size=\"small\" @click=\"showRrwebPlayer(scope.row)\">播放录屏</el-button>\n\t\t\t\t\t\t\t<el-button size=\"small\" @click=\"showBehaviorStack(scope.row)\">行为记录</el-button>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</el-table-column>\n\t\t\t\t</el-table>\n\t\t\t\t<el-empty v-else description=\"暂无错误，请点击上方按钮触发错误\"></el-empty>\n\t\t\t</div>\n\t\t</el-card>\n\n\t\t<!-- 错误详情弹窗 -->\n\t\t<error-detail-dialog v-model:visible=\"errorDetailVisible\" :error=\"currentError\" />\n\n\t\t<!-- 录屏回放弹窗 -->\n\t\t<rrweb-player-dialog v-model:visible=\"rrwebPlayerVisible\" :error=\"currentError\" />\n\n\t\t<!-- 用户行为记录弹窗 -->\n\t\t<behavior-stack-dialog v-model:visible=\"behaviorStackVisible\" :error=\"currentError\" />\n\t</div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport ErrorDetailDialog from './components/ErrorDetailDialog.vue'\nimport RrwebPlayerDialog from './components/RrwebPlayerDialog.vue'\nimport BehaviorStackDialog from './components/BehaviorStackDialog.vue'\n\n// 定义错误对象接口\ninterface ErrorItem {\n\tid: string\n\ttimestamp: string\n\ttype: string\n\tmessage: string\n\tstack: string\n\tparsedStack?: Array<{\n\t\tfile: string\n\t\tline: number\n\t\tcolumn: number\n\t\tfunc: string\n\t}>\n\trrwebData?: any[]\n\tbehaviorStack?: any[]\n}\n\n// 错误列表\nconst errorList = ref<ErrorItem[]>([])\n\n// 当前选中的错误\nconst currentError = ref<ErrorItem | Record<string, any> | null>(null)\n\n// 弹窗可见性\nconst errorDetailVisible = ref(false)\nconst rrwebPlayerVisible = ref(false)\nconst behaviorStackVisible = ref(false)\n\n// 初始化监控SDK\nonMounted(() => {\n\t// 监听SDK捕获的错误\n\twindow.addEventListener('monitor-error', handleMonitorError)\n})\n\n// 清理事件监听\nonUnmounted(() => {\n\twindow.removeEventListener('monitor-error', handleMonitorError)\n})\n\n// 处理SDK捕获的错误\nconst handleMonitorError = (event: any) => {\n\tconsole.log('捕获到错误:', event.detail)\n\n\t// 将错误添加到列表\n\tconst errorData = event.detail\n\n\tconst newError: ErrorItem = {\n\t\tid: generateId(),\n\t\ttimestamp: new Date().toLocaleString(),\n\t\ttype: errorData.type || '未知错误',\n\t\tmessage: errorData.message || '未知错误信息',\n\t\tstack: errorData.stack || '',\n\t\tparsedStack: errorData.parsedStack,\n\t\trrwebData: errorData.rrwebData,\n\t\tbehaviorStack: errorData.behaviorStack,\n\t}\n\n\terrorList.value.unshift(newError)\n\n\tElMessage.success('错误已捕获并添加到列表')\n}\n\n// 生成唯一ID\nconst generateId = () => {\n\treturn Date.now().toString(36) + Math.random().toString(36).substring(2)\n}\n\n// 触发类型错误\nconst triggerTypeError = () => {\n\tconsole.log('即将触发JS加载错误...')\n\tlet a = null\n\tif (a.b) {\n\t\tconsole.log('触发JS加载错误')\n\t}\n}\n\n// 触发引用错误\nconst triggerReferenceError = () => {\n\ttry {\n\t\t// @ts-ignore\n\t\tconsole.log(undefinedVariable)\n\t} catch (error) {\n\t\tconsole.error('手动触发引用错误:', error)\n\t}\n}\n\n// 触发语法错误\nconst triggerSyntaxError = () => {\n\ttry {\n\t\t// 通过eval执行错误的语法\n\t\teval('if(true) {')\n\t} catch (error) {\n\t\tconsole.error('手动触发语法错误:', error)\n\t}\n}\n\n// 触发Promise错误\nconst triggerPromiseError = () => {\n\tPromise.reject(new Error('这是一个Promise错误')).catch(error => {\n\t\tconsole.error('手动触发Promise错误:', error)\n\t})\n}\n\n// 触发资源加载错误\nconst triggerResourceError = () => {\n\tconst img = new Image()\n\timg.src = '/non-existent-image.jpg'\n}\n\n// 触发自定义错误\nconst triggerCustomError = () => {\n\ttry {\n\t\tthrow new Error('这是一个自定义错误')\n\t} catch (error) {\n\t\tconsole.error('手动触发自定义错误:', error)\n\t}\n}\n\n// 显示错误详情\nconst showErrorDetail = (error: ErrorItem) => {\n\tcurrentError.value = error\n\terrorDetailVisible.value = true\n}\n\n// 显示录屏回放\nconst showRrwebPlayer = (error: ErrorItem) => {\n\tcurrentError.value = error\n\trrwebPlayerVisible.value = true\n}\n\n// 显示用户行为记录\nconst showBehaviorStack = (error: ErrorItem) => {\n\tcurrentError.value = error\n\tbehaviorStackVisible.value = true\n}\n</script>\n\n<style scoped>\n.demo-container {\n\tpadding: 20px;\n}\n\n.demo-card {\n\tmargin-bottom: 20px;\n}\n\n.card-header {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n}\n\n.description {\n\tcolor: #666;\n\tmargin-top: 10px;\n}\n\n.error-trigger-section {\n\tmargin-bottom: 30px;\n\tpadding: 20px;\n\tbackground-color: #f8f9fa;\n\tborder-radius: 4px;\n}\n\n.error-buttons {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: 10px;\n\tmargin-top: 15px;\n}\n\n.error-list-section {\n\tmargin-top: 20px;\n}\n</style>\n"],"file":"assets/js/index-25eyldic.js"}