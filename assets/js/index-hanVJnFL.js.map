{"version":3,"mappings":"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","names":["props","__props","emit","__emit","dialogVisible","value","loading","uploading","parsedStack","hasParsedStack","hasStack","newError","frame","errorObj","stackFrames","ErrorStackParser.parse","handleFileChange","uploadFile","frameIndex","resetFrame","fileContent","readFileAsText","consumer","sourceMap.SourceMapConsumer","originalPosition","updatedFrame","sourceContent","lines","startLine","endLine","codeSnippet","e","error","file","resolve","reject","reader","formatFilePath","path","parts","handleClose","playerContainer","playerInstance","recordInfo","formatTime","timestamp","formatDuration","duration","seconds","minutes","remainingSeconds","hasRrwebData","_a","newVal","initPlayer","rrwebPlayer","Replayer","destroyPlayer","_b","emptyMessage","hasBehaviorData","behaviorData","actions","a","b","getBehaviorTagType","subType","getBehaviorIcon","Mouse","Edit","Link","Operation","Document","Pointer","Refresh","Calendar","formatBehaviorTime","getBehaviorDetail","action","behavior","img","response","errors"],"ignoreList":[],"sources":["../../../src/views/demo/components/ErrorDetailDialog.vue","../../../src/views/demo/components/RrwebPlayerDialog.vue","../../../src/views/demo/components/BehaviorStackDialog.vue","../../../src/views/demo/index.vue"],"sourcesContent":["<template>\n\t<el-dialog\n\t\ttitle=\"错误详情\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"error-detail-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<div v-if=\"error\" class=\"error-detail-content\">\n\t\t\t\t<!-- 错误基本信息 -->\n\t\t\t\t<el-descriptions title=\"错误信息\" :column=\"1\" border>\n\t\t\t\t\t<el-descriptions-item label=\"错误类型\">{{ error.type }}</el-descriptions-item>\n\t\t\t\t\t<el-descriptions-item label=\"错误消息\">{{ error.message }}</el-descriptions-item>\n\t\t\t\t\t<el-descriptions-item label=\"发生时间\">{{ error.timestamp }}</el-descriptions-item>\n\t\t\t\t</el-descriptions>\n\n\t\t\t\t<!-- 错误堆栈 -->\n\t\t\t\t<div class=\"stack-section\">\n\t\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t\t<h3>错误堆栈</h3>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- 解析后的堆栈 -->\n\t\t\t\t\t<div v-if=\"hasParsedStack\" class=\"parsed-stack\">\n\t\t\t\t\t\t<div v-for=\"(frame, index) in parsedStack\" :key=\"index\" class=\"stack-frame\">\n\t\t\t\t\t\t\t<div class=\"frame-content\">\n\t\t\t\t\t\t\t\t<div class=\"frame-header\">\n\t\t\t\t\t\t\t\t\t<div class=\"frame-number\">{{ index + 1 }}</div>\n\t\t\t\t\t\t\t\t\t<div class=\"frame-function\">{{ frame.func || '(匿名函数)' }}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"frame-location\">\n\t\t\t\t\t\t\t\t\t<span class=\"file-link\">{{ formatFilePath(frame.file) }}</span>\n\t\t\t\t\t\t\t\t\t<span class=\"line-column\">:{{ frame.line }}:{{ frame.column }}</span>\n\n\t\t\t\t\t\t\t\t\t<div class=\"frame-actions\">\n\t\t\t\t\t\t\t\t\t\t<!-- 每行堆栈对应的上传sourcemap按钮 -->\n\t\t\t\t\t\t\t\t\t\t<el-upload\n\t\t\t\t\t\t\t\t\t\t\tclass=\"sourcemap-uploader\"\n\t\t\t\t\t\t\t\t\t\t\taction=\"#\"\n\t\t\t\t\t\t\t\t\t\t\t:auto-upload=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t:limit=\"1\"\n\t\t\t\t\t\t\t\t\t\t\taccept=\".map,.json\"\n\t\t\t\t\t\t\t\t\t\t\t:show-file-list=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t:on-change=\"(file: any) => handleFileChange(file, index)\">\n\t\t\t\t\t\t\t\t\t\t\t<el-button\n\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t:loading=\"uploading[index]\"\n\t\t\t\t\t\t\t\t\t\t\t\t:disabled=\"frame.hasSourceMap && !frame.parseError\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t\t\t\tframe.hasSourceMap && !frame.parseError\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? '已解析'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: frame.parseError\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? '重新上传'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: '上传SourceMap'\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t\t\t\t\t</el-upload>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<!-- 源代码显示区域 -->\n\t\t\t\t\t\t\t<div v-if=\"frame.hasSourceMap\" class=\"source-code-container\">\n\t\t\t\t\t\t\t\t<pre v-if=\"frame.sourceCode && !frame.parseError\" class=\"source-code\">\n\t\t\t\t\t\t\t\t\t<code v-for=\"(line, lineIndex) in frame.sourceCode.split('\\n')\" :key=\"lineIndex\"\n\t\t\t\t\t\t\t\t\t\t:class=\"{ 'error-line': frame.originalLine === (frame.sourceCodeStartLine || 0) + lineIndex }\"\n\t\t\t\t\t\t\t\t\t\tclass=\"code-line\">\n<span class=\"line-number\">{{ (frame.sourceCodeStartLine || 0) + lineIndex }}:</span><span class=\"line-content\">{{ line }}</span>\n\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t\t\t<div v-else-if=\"frame.parseError\" class=\"parse-error\">\n\t\t\t\t\t\t\t\t\t<span>解析失败：无法解析该堆栈位置的源代码，请检查SourceMap是否匹配，再重新上传</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div v-else class=\"source-code-loading\">\n\t\t\t\t\t\t\t\t\t<el-skeleton :rows=\"3\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- 原始堆栈 -->\n\t\t\t\t\t<div v-else-if=\"hasStack\" class=\"original-stack\">\n\t\t\t\t\t\t<pre>{{ error.stack }}</pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class=\"original-stack\">\n\t\t\t\t\t\t<span>无堆栈信息</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div v-else class=\"error-empty\">\n\t\t\t\t<el-empty description=\"无错误详情数据\" />\n\t\t\t</div>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, reactive } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport type { UploadFile } from 'element-plus'\nimport * as ErrorStackParser from 'error-stack-parser'\nimport * as sourceMap from 'source-map-js'\n\ndefineOptions({\n\tname: 'ErrorDetailDialog',\n})\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 加载状态\nconst loading = ref(false)\nconst uploading = reactive<Record<number, boolean>>({})\n\n// 定义堆栈帧类型\ninterface StackFrame {\n\tfile: string // 文件路径\n\tline: number // 行号\n\tcolumn: number // 列号\n\tfunc: string // 函数名\n\thasSourceMap: boolean // 是否存在SourceMap\n\toriginalFile?: string // 原始文件\n\toriginalLine?: number // 原始行\n\toriginalColumn?: number // 原始列\n\tsourceCode?: string // 源码\n\tsourceCodeStartLine?: number // 源码开始行\n\tparseError?: boolean // 是否解析失败\n}\n\n// 解析后的堆栈\nconst parsedStack = ref<StackFrame[]>([])\n\n// 是否有解析后的堆栈\nconst hasParsedStack = computed(() => {\n\treturn parsedStack.value && parsedStack.value.length > 0\n})\n\nconst hasStack = computed(() => {\n\treturn props.error.stack\n})\n\n// 监听错误变化\nwatch(\n\t() => props.error,\n\tnewError => {\n\t\tif (newError) {\n\t\t\t// 如果错误对象中已有解析后的堆栈，直接使用\n\t\t\tif (newError.parsedStack && newError.parsedStack.length > 0) {\n\t\t\t\tparsedStack.value = newError.parsedStack.map((frame: any) => ({\n\t\t\t\t\t...frame,\n\t\t\t\t\thasSourceMap: false,\n\t\t\t\t\tparseError: false,\n\t\t\t\t}))\n\t\t\t} else {\n\t\t\t\t// 否则尝试使用ErrorStackParser解析\n\t\t\t\ttry {\n\t\t\t\t\t// 创建一个Error对象，设置message和stack\n\t\t\t\t\tconst errorObj = new Error(newError.message)\n\t\t\t\t\terrorObj.stack = newError.stack\n\n\t\t\t\t\t// 使用ErrorStackParser解析堆栈\n\t\t\t\t\tconst stackFrames = ErrorStackParser.parse(errorObj)\n\n\t\t\t\t\t// 转换为我们需要的格式\n\t\t\t\t\tparsedStack.value = stackFrames.map((frame: any) => ({\n\t\t\t\t\t\tfile: frame.fileName || '',\n\t\t\t\t\t\tline: frame.lineNumber || 0,\n\t\t\t\t\t\tcolumn: frame.columnNumber || 0,\n\t\t\t\t\t\tfunc: frame.functionName || '(匿名函数)',\n\t\t\t\t\t\thasSourceMap: false,\n\t\t\t\t\t\tparseError: false,\n\t\t\t\t\t}))\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('解析错误堆栈失败:', e)\n\t\t\t\t\tparsedStack.value = []\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{ immediate: true },\n)\n\n// 处理文件选择变化\nconst handleFileChange = async (uploadFile: UploadFile, frameIndex: number) => {\n\tif (!uploadFile || !uploadFile.raw) {\n\t\tElMessage.warning('请选择有效的SourceMap文件')\n\t\treturn\n\t}\n\n\ttry {\n\t\tuploading[frameIndex] = true\n\t\tconsole.log(`处理第${frameIndex + 1}行堆栈的SourceMap上传`)\n\n\t\t// 获取当前帧\n\t\tconst frame = parsedStack.value[frameIndex]\n\t\tif (!frame) {\n\t\t\tthrow new Error('找不到对应的堆栈帧')\n\t\t}\n\n\t\t// 重置解析状态，确保重新上传时正确处理\n\t\tconst resetFrame = {\n\t\t\t...frame,\n\t\t\thasSourceMap: false,\n\t\t\tparseError: false,\n\t\t\tsourceCode: undefined,\n\t\t\toriginalFile: undefined,\n\t\t\toriginalLine: undefined,\n\t\t\toriginalColumn: undefined,\n\t\t\tsourceCodeStartLine: undefined,\n\t\t}\n\n\t\t// 读取SourceMap文件内容\n\t\tconst fileContent = await readFileAsText(uploadFile.raw as File)\n\n\t\t// 解析SourceMap\n\t\tconst consumer = new sourceMap.SourceMapConsumer(JSON.parse(fileContent))\n\n\t\tconsole.log('解析位置:', frame.line, frame.column)\n\t\tconst originalPosition = consumer.originalPositionFor({\n\t\t\tline: frame.line,\n\t\t\tcolumn: frame.column,\n\t\t})\n\t\tconsole.log('原始位置:', originalPosition)\n\n\t\tif (originalPosition.source) {\n\t\t\t// 更新堆栈帧信息\n\t\t\tconst updatedFrame: StackFrame = {\n\t\t\t\t...resetFrame,\n\t\t\t\thasSourceMap: true,\n\t\t\t\tparseError: false,\n\t\t\t\toriginalFile: originalPosition.source,\n\t\t\t\toriginalLine: originalPosition.line || 0,\n\t\t\t\toriginalColumn: originalPosition.column || 0,\n\t\t\t\tfunc: originalPosition.name || frame.func,\n\t\t\t}\n\n\t\t\t// 尝试获取源代码\n\t\t\ttry {\n\t\t\t\tconst sourceContent = consumer.sourceContentFor(originalPosition.source)\n\t\t\t\tif (sourceContent) {\n\t\t\t\t\t// 计算要显示的源码范围（错误行前后5行）\n\t\t\t\t\tconst lines = sourceContent.split('\\n')\n\t\t\t\t\tconst startLine = Math.max(0, (originalPosition.line || 1) - 5)\n\t\t\t\t\tconst endLine = Math.min(lines.length, (originalPosition.line || 1) + 5)\n\n\t\t\t\t\t// 提取源码片段\n\t\t\t\t\tconst codeSnippet = lines.slice(startLine, endLine).join('\\n')\n\n\t\t\t\t\t// 更新源码信息\n\t\t\t\t\tupdatedFrame.sourceCode = codeSnippet\n\t\t\t\t\tupdatedFrame.sourceCodeStartLine = startLine + 1 // 1-based line number\n\t\t\t\t} else {\n\t\t\t\t\t// 无法获取源代码内容\n\t\t\t\t\tupdatedFrame.parseError = true\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('获取源代码失败:', e)\n\t\t\t\tupdatedFrame.parseError = true\n\t\t\t}\n\n\t\t\t// 更新堆栈帧\n\t\t\tparsedStack.value[frameIndex] = updatedFrame\n\n\t\t\tif (!updatedFrame.parseError) {\n\t\t\t\tElMessage.success(`第${frameIndex + 1}行堆栈的SourceMap解析成功`)\n\t\t\t} else {\n\t\t\t\tElMessage.warning(`第${frameIndex + 1}行堆栈的源代码获取失败`)\n\t\t\t}\n\t\t} else {\n\t\t\t// 无法解析原始位置\n\t\t\tparsedStack.value[frameIndex] = {\n\t\t\t\t...resetFrame,\n\t\t\t\thasSourceMap: true,\n\t\t\t\tparseError: true,\n\t\t\t}\n\t\t\tElMessage.warning(`无法解析第${frameIndex + 1}行堆栈，请检查SourceMap是否匹配`)\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('解析SourceMap失败:', error)\n\t\t// 更新解析错误状态\n\t\tif (parsedStack.value[frameIndex]) {\n\t\t\tparsedStack.value[frameIndex] = {\n\t\t\t\t...parsedStack.value[frameIndex],\n\t\t\t\thasSourceMap: true,\n\t\t\t\tparseError: true,\n\t\t\t}\n\t\t}\n\t\tElMessage.error('解析SourceMap失败')\n\t} finally {\n\t\tuploading[frameIndex] = false\n\t}\n}\n\n// 读取文件内容为文本\nconst readFileAsText = (file: File): Promise<string> => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.onload = () => resolve(reader.result as string)\n\t\treader.onerror = reject\n\t\treader.readAsText(file)\n\t})\n}\n\n// 格式化文件路径，提取文件名\nconst formatFilePath = (path: string) => {\n\tif (!path) return '(未知文件)'\n\tconst parts = path.split('/')\n\treturn parts[parts.length - 1]\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n}\n</script>\n\n<style scoped>\n.error-detail-content {\n\tpadding: 10px;\n}\n\n.stack-section {\n\tmargin-top: 20px;\n}\n\n.section-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n}\n\n.original-stack {\n\tbackground-color: #f5f7fa;\n\tpadding: 15px;\n\tborder-radius: 4px;\n\toverflow-x: auto;\n\tmax-height: 300px;\n\tline-height: 1.3;\n\tfont-size: 13px;\n\tfont-family: 'Courier New', monospace;\n}\n\n.parsed-stack {\n\tbackground-color: #f5f7fa;\n\tborder-radius: 4px;\n\toverflow-x: auto;\n\tmax-height: 600px;\n}\n\n.stack-frame {\n\tpadding: 8px 10px;\n\tborder-bottom: 1px solid #ebeef5;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.stack-frame:last-child {\n\tborder-bottom: none;\n}\n\n.frame-content {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.frame-header {\n\tdisplay: flex;\n\talign-items: center;\n\tmargin-bottom: 3px;\n}\n\n.frame-number {\n\twidth: 25px;\n\tcolor: #909399;\n\tfont-weight: bold;\n\tmargin-right: 5px;\n}\n\n.frame-function {\n\tfont-weight: bold;\n\tcolor: #303133;\n\tfont-size: 14px;\n}\n\n.frame-location {\n\tcolor: #606266;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tmargin-bottom: 5px;\n\tfont-size: 13px;\n}\n\n.file-link {\n\tcolor: #409eff;\n}\n\n.line-column {\n\tcolor: #f56c6c;\n}\n\n.frame-actions {\n\tdisplay: flex;\n\tgap: 5px;\n}\n\n.source-code-container {\n\tmargin-top: 6px;\n\tmargin-bottom: 0;\n\tpadding: 10px;\n\tbackground-color: #282c34;\n\tborder-radius: 4px;\n\toverflow-x: auto;\n\tbox-shadow: 0 1px 4px rgba(0, 0, 0, 0.15);\n}\n\n.source-code {\n\tmargin: 0;\n\tpadding: 0;\n\tfont-family: 'Courier New', Courier, monospace;\n\tfont-size: 12px;\n\tline-height: 8px;\n\tcolor: #abb2bf;\n}\n\n.code-line {\n\tdisplay: block;\n\tpadding-left: 5px;\n\twhite-space: pre;\n}\n\n.error-line {\n\tbackground-color: rgba(255, 0, 0, 0.2);\n\tcolor: #ff7875;\n\tfont-weight: bold;\n\tborder-left: 2px solid #ff4d4f;\n}\n\n.line-number {\n\tdisplay: inline-block;\n\tmin-width: 35px;\n\tcolor: #636d83;\n\tpadding-right: 10px;\n\ttext-align: right;\n\tuser-select: none;\n}\n\n.line-content {\n\twhite-space: pre;\n}\n\n.source-code-loading {\n\tpadding: 5px;\n}\n\n.parse-error {\n\tpadding: 5px;\n}\n\n.parse-error span {\n\tcolor: #f56c6c;\n}\n</style>\n","<template>\n\t<el-dialog\n\t\ttitle=\"错误录屏回放\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"rrweb-player-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 有录屏数据 -->\n\t\t\t<template v-if=\"hasRrwebData\">\n\t\t\t\t<div class=\"record-info\" v-if=\"recordInfo\">\n\t\t\t\t\t<p><strong>录制信息：</strong></p>\n\t\t\t\t\t<p>开始时间：{{ formatTime(recordInfo.startTime) }}</p>\n\t\t\t\t\t<p>结束时间：{{ formatTime(recordInfo.endTime) }}</p>\n\t\t\t\t\t<p>持续时间：{{ formatDuration(recordInfo.duration) }}</p>\n\t\t\t\t\t<p>事件数量：{{ recordInfo.eventsCount }}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"player-container-wrapper\">\n\t\t\t\t\t<div ref=\"playerContainer\" class=\"player-container\"></div>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<!-- 无录屏数据 -->\n\t\t\t<template v-else-if=\"!loading\">\n\t\t\t\t<el-empty description=\"暂无会话录屏数据\">\n\t\t\t\t\t<template #description>\n\t\t\t\t\t\t<p>该错误事件未包含会话录屏数据</p>\n\t\t\t\t\t\t<p class=\"empty-tip\">提示: 确保SDK配置中启用了rrweb插件，并设置了适当的录制模式</p>\n\t\t\t\t\t</template>\n\t\t\t\t</el-empty>\n\t\t\t</template>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onUnmounted } from 'vue'\nimport { ElMessage } from 'element-plus'\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 播放器容器\nconst playerContainer = ref<HTMLElement | null>(null)\n\n// 播放器实例\nconst playerInstance = ref<any>(null)\n\n// 加载状态\nconst loading = ref(false)\n\n// 录制信息\nconst recordInfo = computed(() => {\n\tif (!props.error) return null\n\n\treturn {\n\t\tstartTime: props.error.startTime,\n\t\tendTime: props.error.endTime,\n\t\tduration: props.error.duration,\n\t\teventsCount: props.error.eventsCount,\n\t}\n})\n\n// 格式化时间\nconst formatTime = (timestamp: number) => {\n\tif (!timestamp) return '未知'\n\tconst date = new Date(timestamp)\n\treturn date.toLocaleString()\n}\n\n// 格式化持续时间\nconst formatDuration = (duration: number) => {\n\tif (!duration) return '未知'\n\tconst seconds = Math.floor(duration / 1000)\n\tif (seconds < 60) {\n\t\treturn `${seconds}秒`\n\t}\n\tconst minutes = Math.floor(seconds / 60)\n\tconst remainingSeconds = seconds % 60\n\treturn `${minutes}分${remainingSeconds}秒`\n}\n\n// 是否有录屏数据\nconst hasRrwebData = computed(() => {\n\tconsole.log('检查录屏数据:', props.error)\n\treturn props.error?.events && props.error.events.length > 0\n})\n\n// 监听对话框可见性变化\nwatch(\n\t() => dialogVisible.value,\n\tasync newVal => {\n\t\tif (newVal && hasRrwebData.value) {\n\t\t\tloading.value = true\n\t\t\ttry {\n\t\t\t\t// 等待DOM更新\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\n\t\t\t\tawait initPlayer()\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('初始化播放器失败:', error)\n\t\t\t\tElMessage.error('初始化播放器失败')\n\t\t\t} finally {\n\t\t\t\tloading.value = false\n\t\t\t}\n\t\t}\n\t},\n)\n\n// 初始化播放器\nconst initPlayer = async () => {\n\tif (!hasRrwebData.value || !playerContainer.value || !props.error) return\n\n\ttry {\n\t\t// 动态导入rrweb-player\n\t\tconst rrwebPlayer = await import('rrweb-player')\n\t\t// 导入CSS\n\t\tawait import('rrweb-player/dist/style.css')\n\n\t\tconst Replayer = rrwebPlayer.default\n\n\t\tconsole.log('创建播放器，使用的录制数据:', props.error.events)\n\n\t\t// 销毁旧的播放器实例\n\t\tdestroyPlayer()\n\n\t\t// 创建新的播放器实例\n\t\tplayerInstance.value = new Replayer({\n\t\t\ttarget: playerContainer.value,\n\t\t\tprops: {\n\t\t\t\tevents: props.error.events, // 使用新的数据结构中的events\n\t\t\t\tshowController: true,\n\t\t\t\tautoPlay: false,\n\t\t\t\twidth: playerContainer.value.clientWidth,\n\t\t\t\theight: Math.min(window.innerHeight * 0.6, 600),\n\t\t\t},\n\t\t})\n\n\t\tconsole.log('rrweb播放器初始化成功')\n\t} catch (error) {\n\t\tconsole.error('初始化rrweb播放器失败:', error)\n\t\tthrow error\n\t}\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n\n\t// 销毁播放器实例\n\tdestroyPlayer()\n}\n\nconst destroyPlayer = () => {\n\tif (playerInstance.value) {\n\t\tplayerInstance.value.destroy?.()\n\t\tplayerInstance.value = null\n\t}\n}\n\n// 组件卸载时清理资源\nonUnmounted(() => {\n\tdestroyPlayer()\n})\n</script>\n\n<style scoped>\n.player-container-wrapper {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\tmargin: 20px 0;\n}\n\n.player-container {\n\twidth: 100%;\n\tmin-height: 400px;\n}\n\n.empty-tip {\n\tcolor: #909399;\n\tfont-size: 14px;\n\tmargin-top: 10px;\n}\n\n.record-info {\n\tmargin-bottom: 20px;\n\tpadding: 15px;\n\tbackground-color: #f8f9fa;\n\tborder-radius: 4px;\n\tfont-size: 14px;\n}\n\n.record-info p {\n\tmargin: 5px 0;\n}\n</style>\n","<template>\n\t<el-dialog\n\t\ttitle=\"用户行为记录\"\n\t\tv-model=\"dialogVisible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"behavior-stack-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 有行为数据 -->\n\t\t\t<template v-if=\"hasBehaviorData\">\n\t\t\t\t<div class=\"behavior-header\">\n\t\t\t\t\t<div class=\"stack-info\">\n\t\t\t\t\t\t<p>行为栈ID: {{ props.error.stackId }}</p>\n\t\t\t\t\t\t<p>关联错误ID: {{ props.error.errorId }}</p>\n\t\t\t\t\t\t<p>行为数量: {{ props.error.count }}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<el-timeline>\n\t\t\t\t\t<el-timeline-item\n\t\t\t\t\t\tv-for=\"(action, index) in behaviorData\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t:type=\"getBehaviorTagType(action.subType)\"\n\t\t\t\t\t\t:icon=\"getBehaviorIcon(action.subType)\"\n\t\t\t\t\t\t:timestamp=\"formatBehaviorTime(action.timestamp)\"\n\t\t\t\t\t\tsize=\"large\">\n\t\t\t\t\t\t<div class=\"behavior-item\">\n\t\t\t\t\t\t\t<div class=\"behavior-type\">\n\t\t\t\t\t\t\t\t<el-tag size=\"small\" :type=\"getBehaviorTagType(action.subType)\">{{ action.subType }}</el-tag>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"behavior-detail\">{{ getBehaviorDetail(action) }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</el-timeline-item>\n\t\t\t\t</el-timeline>\n\t\t\t</template>\n\n\t\t\t<!-- 无行为数据或格式不匹配 -->\n\t\t\t<template v-else-if=\"!loading\">\n\t\t\t\t<el-empty description=\"暂无用户行为记录\">\n\t\t\t\t\t<template #description>\n\t\t\t\t\t\t<p>{{ emptyMessage }}</p>\n\t\t\t\t\t\t<p class=\"empty-tip\">提示: 确保传入正确格式的用户行为栈数据</p>\n\t\t\t\t\t</template>\n\t\t\t\t</el-empty>\n\t\t\t</template>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { Calendar, Mouse, Link, Document, Operation, Pointer, Refresh, Edit } from '@element-plus/icons-vue'\n\nconst props = defineProps({\n\tvisible: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n\terror: {\n\t\ttype: Object,\n\t\tdefault: () => ({}),\n\t},\n})\n\nconst emit = defineEmits(['update:visible'])\n\n// 对话框可见性\nconst dialogVisible = computed({\n\tget: () => props.visible,\n\tset: value => emit('update:visible', value),\n})\n\n// 加载状态\nconst loading = ref(false)\n\n// 空数据提示信息\nconst emptyMessage = computed(() => {\n\tif (!props.error || Object.keys(props.error).length === 0) {\n\t\treturn '未传入行为栈数据'\n\t}\n\n\tif (props.error.type !== 'behavior' || props.error.subType !== 'stack') {\n\t\treturn '数据格式不匹配，需要behavior.stack类型的行为栈数据'\n\t}\n\n\tif (!props.error.actions || !Array.isArray(props.error.actions) || props.error.actions.length === 0) {\n\t\treturn '行为栈中不包含任何行为记录'\n\t}\n\n\treturn '暂无用户行为记录'\n})\n\n// 是否有行为数据\nconst hasBehaviorData = computed(() => {\n\tconsole.log('接收到的数据:', props.error)\n\n\t// 格式验证：必须是behavior.stack类型，且包含actions数组\n\treturn (\n\t\tprops.error &&\n\t\tprops.error.type === 'behavior' &&\n\t\tprops.error.subType === 'stack' &&\n\t\tprops.error.actions &&\n\t\tArray.isArray(props.error.actions) &&\n\t\tprops.error.actions.length > 0\n\t)\n})\n\n// 行为数据，按时间正序排列（从早到晚）\nconst behaviorData = computed(() => {\n\tif (!hasBehaviorData.value) return []\n\n\t// 复制数组并排序\n\tconst actions = [...props.error.actions]\n\tconsole.log('处理行为数据，数量:', actions.length)\n\n\treturn actions.sort((a, b) => a.timestamp - b.timestamp)\n})\n\n// 获取行为类型对应的标签类型\nconst getBehaviorTagType = (subType: string) => {\n\tconst typeMap: Record<string, string> = {\n\t\tclick: 'primary',\n\t\tinput: 'success',\n\t\tpageChange: 'warning',\n\t\tnavigation: 'warning',\n\t\tapi: 'danger',\n\t\tpageview: 'info',\n\t\tscroll: '',\n\t\tresize: '',\n\t\tkeypress: 'success',\n\t\terror: 'danger',\n\t}\n\n\treturn typeMap[subType] || ''\n}\n\n// 获取行为类型对应的图标\nconst getBehaviorIcon = (subType: string) => {\n\tconst iconMap: Record<string, any> = {\n\t\tclick: Mouse,\n\t\tinput: Edit,\n\t\tpageChange: Link,\n\t\tnavigation: Link,\n\t\tapi: Operation,\n\t\tpageview: Document,\n\t\tscroll: Pointer,\n\t\tresize: Refresh,\n\t\tkeypress: Edit,\n\t\terror: 'CircleClose',\n\t}\n\n\treturn iconMap[subType] || Calendar\n}\n\n// 格式化行为时间\nconst formatBehaviorTime = (timestamp: number) => {\n\tif (!timestamp) return ''\n\n\tconst date = new Date(timestamp)\n\treturn date.toLocaleString()\n}\n\n// 获取行为详情\nconst getBehaviorDetail = (action: any) => {\n\tconsole.log('获取行为详情:', action)\n\n\t// 尝试从data中获取详细信息\n\tconst behavior = action.data || action\n\n\tconst type = action.type === 'behavior' ? action.subType : action.type\n\n\tswitch (type) {\n\t\tcase 'click':\n\t\t\treturn `点击了 ${behavior.target || '元素'} ${behavior.content ? `\"${behavior.content}\"` : ''} ${\n\t\t\t\tbehavior.position ? `位置(${behavior.position.x}, ${behavior.position.y})` : ''\n\t\t\t}`\n\t\tcase 'input':\n\t\t\treturn `在 ${behavior.target || '输入框'} 中输入内容 ${behavior.content ? `\"${behavior.content}\"` : ''}`\n\t\tcase 'pageChange':\n\t\tcase 'navigation':\n\t\t\treturn `从 ${behavior.from || behavior.fromPath || '未知页面'} 导航到 ${\n\t\t\t\tbehavior.to || behavior.toPath || '未知页面'\n\t\t\t} ${behavior.changeType ? `(${behavior.changeType})` : ''}`\n\t\tcase 'api':\n\t\t\treturn `${behavior.method || 'GET'} 请求 ${behavior.url || '未知接口'} ${\n\t\t\t\tbehavior.status ? `状态码: ${behavior.status}` : ''\n\t\t\t}`\n\t\tcase 'pageview':\n\t\t\treturn `访问页面 ${behavior.pageUrl || '未知页面'}`\n\t\tcase 'scroll':\n\t\t\treturn `滚动到位置 ${behavior.position ? `(${behavior.position.x}, ${behavior.position.y})` : '未知位置'}`\n\t\tcase 'keypress':\n\t\t\treturn `按键 ${behavior.key || '未知按键'}`\n\t\tcase 'error':\n\t\t\treturn `发生错误: ${behavior.message || '未知错误'} ${behavior.stack ? '（详细堆栈信息已记录）' : ''}`\n\t\tdefault:\n\t\t\treturn JSON.stringify(behavior)\n\t}\n}\n\n// 关闭弹窗\nconst handleClose = () => {\n\tdialogVisible.value = false\n}\n</script>\n\n<style scoped>\n.behavior-stack-dialog :deep(.el-dialog__body) {\n\tpadding-top: 10px;\n}\n\n.behavior-header {\n\tmargin-bottom: 20px;\n\tpadding: 10px;\n\tbackground-color: #f5f7fa;\n\tborder-radius: 4px;\n}\n\n.stack-info {\n\tfont-size: 14px;\n\tcolor: #606266;\n}\n\n.stack-info p {\n\tmargin: 5px 0;\n}\n\n.behavior-item {\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n}\n\n.behavior-type {\n\tmargin-bottom: 5px;\n}\n\n.behavior-detail {\n\tcolor: #606266;\n}\n\n.empty-tip {\n\tcolor: #909399;\n\tfont-size: 14px;\n\tmargin-top: 10px;\n}\n</style>\n","<template>\n\t<div class=\"demo-container\">\n\t\t<el-card class=\"demo-card\">\n\t\t\t<template #header>\n\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t<h2>错误采集和还原定位演示</h2>\n\t\t\t\t\t<p class=\"description\">\n\t\t\t\t\t\t本页面用于演示前端监控SDK的错误采集和还原定位功能，包括sourcemap定位源码、播放录屏和记录用户行为记录。\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<!-- 错误触发区域 -->\n\t\t\t<div class=\"error-trigger-section\">\n\t\t\t\t<h3>触发错误</h3>\n\t\t\t\t<p>1. 先点击下方按钮触发不同类型的错误，控制台可以看到\"捕获数据已入队\"，表示数据已被捕获。</p>\n\t\t\t\t<p>2. 点击\"获取错误列表\"按钮，可以看到错误列表，点击错误列表中的错误详情按钮，可以查看错误详情。</p>\n\t\t\t\t<p>3. 点击错误列表中的播放录屏按钮，可以播放录屏，查看错误发生时的操作行为。</p>\n\t\t\t\t<p>4. 点击错误列表中的行为记录按钮，可以查看行为记录，包括用户行为记录、页面加载记录、资源加载记录等。</p>\n\n\t\t\t\t<div class=\"error-buttons\">\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerTypeError\">触发类型错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerReferenceError\">触发引用错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerSyntaxError\">触发语法错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerPromiseError\">触发Promise错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerResourceError\">触发资源加载错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerHttpError\">触发HTTP错误</el-button>\n\t\t\t\t\t<el-button type=\"danger\" @click=\"triggerCustomError\">触发自定义错误</el-button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- 新增：用户行为监控测试区域 -->\n\t\t\t<div class=\"behavior-test-section\">\n\t\t\t\t<h3>用户行为监控测试</h3>\n\t\t\t\t<p>通过以下交互测试用户行为监控功能，所有行为将被记录并可以在发生错误时回放：</p>\n\n\t\t\t\t<!-- 点击行为测试 -->\n\t\t\t\t<el-card class=\"behavior-card\">\n\t\t\t\t\t<template #header>\n\t\t\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t\t\t<h4>点击行为测试</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<p>点击下面的按钮，测试点击行为收集功能：</p>\n\t\t\t\t\t<div class=\"behavior-buttons\">\n\t\t\t\t\t\t<el-button id=\"normal-button\">普通按钮</el-button>\n\t\t\t\t\t\t<el-button id=\"data-button\" data-test=\"test-data\">带数据属性的按钮</el-button>\n\t\t\t\t\t\t<el-button class=\"monitor-ignore\" type=\"danger\">被忽略的按钮</el-button>\n\t\t\t\t\t\t<el-button data-monitor-ignore type=\"danger\">被忽略的按钮 (属性)</el-button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<el-form :model=\"formData\" label-width=\"120px\">\n\t\t\t\t\t\t\t<el-form-item label=\"测试输入框：\">\n\t\t\t\t\t\t\t\t<el-input v-model=\"formData.input\" placeholder=\"在此输入文本\" />\n\t\t\t\t\t\t\t</el-form-item>\n\n\t\t\t\t\t\t\t<el-form-item label=\"密码输入框：\">\n\t\t\t\t\t\t\t\t<el-input v-model=\"formData.password\" type=\"password\" placeholder=\"在此输入密码\" show-password />\n\t\t\t\t\t\t\t</el-form-item>\n\n\t\t\t\t\t\t\t<el-form-item label=\"测试文本区域：\">\n\t\t\t\t\t\t\t\t<el-input v-model=\"formData.textarea\" type=\"textarea\" placeholder=\"在此输入多行文本\" :rows=\"3\" />\n\t\t\t\t\t\t\t</el-form-item>\n\t\t\t\t\t\t</el-form>\n\t\t\t\t\t</div>\n\t\t\t\t</el-card>\n\n\t\t\t\t<!-- 页面跳转测试 -->\n\t\t\t\t<el-card class=\"behavior-card\">\n\t\t\t\t\t<template #header>\n\t\t\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t\t\t<h4>页面跳转测试</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<p>点击下面的链接，测试页面跳转收集功能：</p>\n\t\t\t\t\t<div class=\"history-buttons\">\n\t\t\t\t\t\t<el-button id=\"push-state\" @click=\"usePushState\">使用 pushState</el-button>\n\t\t\t\t\t\t<el-button id=\"replace-state\" @click=\"useReplaceState\">使用 replaceState</el-button>\n\t\t\t\t\t\t<el-button id=\"go-back\" @click=\"goBack\">后退</el-button>\n\t\t\t\t\t</div>\n\t\t\t\t</el-card>\n\t\t\t</div>\n\n\t\t\t<!-- 错误列表区域 -->\n\t\t\t<div class=\"error-list-section\">\n\t\t\t\t<h3>\n\t\t\t\t\t采集数据列表\n\t\t\t\t\t<el-button type=\"primary\" @click=\"getErrorList\">获取错误列表</el-button>\n\t\t\t\t</h3>\n\n\t\t\t\t<el-table v-if=\"errorList.length\" :data=\"errorList\" style=\"width: 100%\" border>\n\t\t\t\t\t<el-table-column prop=\"timestamp\" label=\"时间\" width=\"180\" />\n\t\t\t\t\t<el-table-column prop=\"subType\" label=\"错误类型\" width=\"150\" />\n\t\t\t\t\t<el-table-column prop=\"message\" label=\"错误信息\" />\n\t\t\t\t\t<el-table-column label=\"操作\" width=\"300\">\n\t\t\t\t\t\t<template #default=\"scope\">\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"showErrorDetail(scope.row)\">错误详情</el-button>\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"showRrwebPlayer(scope.row)\">播放录屏</el-button>\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" @click=\"showBehaviorStack(scope.row)\">行为记录</el-button>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</el-table-column>\n\t\t\t\t</el-table>\n\t\t\t\t<el-empty v-else description=\"暂无错误，请点击上方按钮触发错误\"></el-empty>\n\t\t\t</div>\n\t\t</el-card>\n\n\t\t<!-- 错误详情弹窗 -->\n\t\t<error-detail-dialog v-model:visible=\"errorDetailVisible\" :error=\"currentError\" />\n\n\t\t<!-- 录屏回放弹窗 -->\n\t\t<rrweb-player-dialog v-model:visible=\"rrwebPlayerVisible\" :error=\"currentError\" />\n\n\t\t<!-- 用户行为记录弹窗 -->\n\t\t<behavior-stack-dialog v-model:visible=\"behaviorStackVisible\" :error=\"currentError\" />\n\t</div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, reactive } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport ErrorDetailDialog from './components/ErrorDetailDialog.vue'\nimport RrwebPlayerDialog from './components/RrwebPlayerDialog.vue'\nimport BehaviorStackDialog from './components/BehaviorStackDialog.vue'\n\n// 定义错误对象接口\ninterface ErrorItem {\n\tid: string\n\ttimestamp: string\n\ttype: string\n\tmessage: string\n\tstack: string\n\tparsedStack?: Array<{\n\t\tfile: string\n\t\tline: number\n\t\tcolumn: number\n\t\tfunc: string\n\t}>\n\trrwebData?: any[]\n\tbehaviorStack?: any[]\n}\n\n// 错误列表\nconst errorList = ref<ErrorItem[]>([])\n\n// 当前选中的错误\nconst currentError = ref<ErrorItem | Record<string, any> | null>(null)\n\n// 弹窗可见性\nconst errorDetailVisible = ref(false)\nconst rrwebPlayerVisible = ref(false)\nconst behaviorStackVisible = ref(false)\n\n// 表单数据\nconst formData = reactive({\n\tinput: '',\n\tpassword: '',\n\ttextArea: '',\n})\n\n// 触发类型错误\nconst triggerTypeError = () => {\n\tconst obj = null\n\tobj.nonExistentMethod()\n}\n\n// 触发引用错误\nconst triggerReferenceError = () => {\n\tconsole.log(undefinedVariable)\n}\n\n// 触发语法错误\nconst triggerSyntaxError = () => {\n\teval('if(true) {')\n}\n\n// 触发Promise错误\nconst triggerPromiseError = () => {\n\tPromise.reject(new Error('这是一个Promise错误'))\n}\n\n// 触发资源加载错误\nconst triggerResourceError = () => {\n\tconst img = new Image()\n\timg.src = '/non-existent-image.jpg'\n\tdocument.body.appendChild(img)\n}\n\n// 触发HTTP错误\nconst triggerHttpError = () => {\n\tfetch('https://example.com/non-existent-api')\n\t\t.then(response => {\n\t\t\tconsole.log('HTTP 响应状态:', response.status)\n\t\t\treturn response.json()\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('捕获到 fetch 错误:', error)\n\t\t})\n}\n\n// 触发自定义错误\nconst triggerCustomError = () => {\n\ttry {\n\t\tthrow new Error('这是一个自定义错误')\n\t} catch (error) {\n\t\tif (window.monitor && typeof window.monitor.reportError === 'function') {\n\t\t\t// @ts-ignore\n\t\t\twindow.monitor.reportError(error, {\n\t\t\t\tcomponent: 'ErrorExample',\n\t\t\t\taction: 'triggerCustomError',\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.error('monitor未初始化或reportError方法不可用')\n\t\t}\n\t}\n}\n\nconst getErrorList = () => {\n\tif (window.monitor && typeof window.monitor.getQueue === 'function') {\n\t\t// @ts-ignore\n\t\tconst errors = window.monitor.getQueue()\n\t\tconsole.log('errors==>', errors)\n\t\terrorList.value = errors.filter((error: any) => {\n\t\t\treturn (\n\t\t\t\terror.type === 'error' ||\n\t\t\t\t(error.type === 'behavior' && (error.subType === 'stack' || error.subType === 'rrweb'))\n\t\t\t)\n\t\t})\n\t} else {\n\t\tconsole.error('monitor未初始化或getQueue方法不可用')\n\t\tElMessage.error('monitor未初始化或getQueue方法不可用')\n\t}\n}\n\n// 页面跳转测试\nconst usePushState = () => {\n\thistory.pushState({}, 'Push State Page', '#/push-state-page')\n\tconsole.log('已使用 pushState 跳转到 #/push-state-page')\n}\n\nconst useReplaceState = () => {\n\thistory.replaceState({}, 'Replace State Page', '#/replace-state-page')\n\tconsole.log('已使用 replaceState 跳转到 #/replace-state-page')\n}\n\nconst goBack = () => {\n\thistory.back()\n\tconsole.log('已触发后退操作')\n}\n\n// 手动控制功能\nconst flushQueue = () => {\n\tif (window.monitor && typeof window.monitor.flush === 'function') {\n\t\t// @ts-ignore\n\t\twindow.monitor.flush()\n\t\tconsole.log('已手动发送数据队列')\n\t\tElMessage.success('已手动发送数据队列')\n\t} else {\n\t\tconsole.error('monitor未初始化或flush方法不可用')\n\t\tElMessage.error('monitor未初始化或flush方法不可用')\n\t}\n}\n\nconst clearConsole = () => {\n\tconsole.clear()\n\tconsole.log('控制台已清空')\n\tElMessage.success('控制台已清空')\n}\n\n// 显示错误详情\nconst showErrorDetail = (error: ErrorItem) => {\n\tcurrentError.value = error\n\terrorDetailVisible.value = true\n}\n\n// 显示录屏回放\nconst showRrwebPlayer = (error: ErrorItem) => {\n\tcurrentError.value = error\n\trrwebPlayerVisible.value = true\n}\n\n// 显示用户行为记录\nconst showBehaviorStack = (error: ErrorItem) => {\n\tcurrentError.value = error\n\tbehaviorStackVisible.value = true\n}\n\ndeclare global {\n\tinterface Window {\n\t\tmonitor?: any\n\t}\n}\n</script>\n\n<style scoped>\n.demo-container {\n\tpadding: 20px;\n}\n\n.demo-card {\n\tmargin-bottom: 20px;\n}\n\n.card-header {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n}\n\n.description {\n\tcolor: #666;\n\tmargin-top: 10px;\n}\n\n.error-trigger-section {\n\tmargin-bottom: 30px;\n\tpadding: 20px;\n\tbackground-color: #f8f9fa;\n\tborder-radius: 4px;\n}\n\n.error-buttons {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: 10px;\n\tmargin-top: 15px;\n}\n\n.behavior-test-section {\n\tmargin-bottom: 30px;\n}\n\n.behavior-card {\n\tmargin-bottom: 20px;\n}\n\n.behavior-buttons {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: 10px;\n\tmargin-bottom: 20px;\n}\n\n.monitor-ignore {\n\tbackground-color: #f56c6c;\n}\n\n.monitor-ignore:hover {\n\tbackground-color: #e64242;\n}\n\n.form-group {\n\tmargin: 15px 0;\n}\n\n.navigation {\n\tmargin: 15px 0;\n\tdisplay: flex;\n\tgap: 20px;\n}\n\n.nav-link {\n\tfont-size: 14px;\n}\n\n.history-buttons {\n\tmargin-top: 15px;\n\tdisplay: flex;\n\tgap: 10px;\n}\n\n.control-buttons {\n\tdisplay: flex;\n\tgap: 10px;\n}\n\n.error-list-section {\n\tmargin-top: 20px;\n}\n</style>\n"],"file":"assets/js/index-hanVJnFL.js"}