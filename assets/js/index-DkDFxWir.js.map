{"version":3,"file":"index-DkDFxWir.js","sources":["../../../src/components/error/ErrorFilter.vue","../../../src/components/error/dialogs/SourceCodeDialog.vue","../../../src/components/error/dialogs/RrwebPlayerDialog.vue","../../../src/components/error/dialogs/BehaviorStackDialog.vue","../../../src/components/error/ErrorTable.vue","../../../src/views/error/index.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { watch, reactive } from 'vue'\nimport { useAppStore } from '../../store/app'\nimport TimeRangeSelector from '../common/TimeRangeSelector.vue'\nimport type { TimeRange } from '../../store/app'\n\n// 错误类型选项\nconst errorTypes = [\n\t{ value: '', label: '全部类型' },\n\t{ value: 'TypeError', label: 'TypeError' },\n\t{ value: 'ReferenceError', label: 'ReferenceError' },\n\t{ value: 'SyntaxError', label: 'SyntaxError' },\n\t{ value: 'RangeError', label: 'RangeError' },\n\t{ value: 'URIError', label: 'URIError' },\n\t{ value: 'EvalError', label: 'EvalError' },\n\t{ value: 'InternalError', label: 'InternalError' },\n]\n\n// 排序选项\nconst sortOptions = [\n\t{ value: 'lastSeen_desc', label: '最近发生' },\n\t{ value: 'count_desc', label: '发生次数 (多到少)' },\n\t{ value: 'count_asc', label: '发生次数 (少到多)' },\n\t{ value: 'userCount_desc', label: '影响用户数 (多到少)' },\n\t{ value: 'userCount_asc', label: '影响用户数 (少到多)' },\n\t{ value: 'firstSeen_desc', label: '首次发生 (新到旧)' },\n\t{ value: 'firstSeen_asc', label: '首次发生 (旧到新)' },\n]\n\n// 定义组件属性\ninterface Props {\n\terrorType?: string\n\tsortBy?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n\terrorType: '',\n\tsortBy: 'lastSeen_desc',\n})\n\n// 定义事件\nconst emit = defineEmits(['update:errorType', 'update:sortBy', 'refresh'])\n\nconst appStore = useAppStore()\n\n// 表单数据\nconst formData = reactive({\n\terrorType: props.errorType,\n\tsortBy: props.sortBy,\n})\n\n// 监听属性变化\nwatch(\n\t() => props.errorType,\n\tnewVal => {\n\t\tformData.errorType = newVal\n\t},\n)\n\nwatch(\n\t() => props.sortBy,\n\tnewVal => {\n\t\tformData.sortBy = newVal\n\t},\n)\n\n// 错误类型变化处理\nconst handleErrorTypeChange = (value: string) => {\n\temit('update:errorType', value)\n\temit('refresh')\n}\n\n// 排序方式变化处理\nconst handleSortChange = (value: string) => {\n\temit('update:sortBy', value)\n\temit('refresh')\n}\n\n// 时间范围变化处理\nconst handleTimeRangeChange = (timeRange: TimeRange) => {\n\tappStore.setTimeRange(timeRange)\n\t// 时间范围变化会触发父组件的watch，自动刷新数据\n\tconsole.log('时间范围变化:', timeRange)\n}\n\n// 刷新数据\nconst refreshData = () => {\n\tconsole.log('手动刷新数据')\n\temit('refresh')\n}\n</script>\n\n<template>\n\t<div class=\"error-filter\">\n\t\t<el-card shadow=\"never\" class=\"filter-card\">\n\t\t\t<el-form :model=\"formData\" label-position=\"left\" class=\"filter-form\">\n\t\t\t\t<el-row :gutter=\"20\">\n\t\t\t\t\t<!-- 时间范围选择器 -->\n\t\t\t\t\t<el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n\t\t\t\t\t\t<el-form-item label=\"时间范围\">\n\t\t\t\t\t\t\t<TimeRangeSelector @change=\"handleTimeRangeChange\" />\n\t\t\t\t\t\t</el-form-item>\n\t\t\t\t\t</el-col>\n\n\t\t\t\t\t<el-col :xs=\"24\" :sm=\"12\" :md=\"6\" :lg=\"4\" :xl=\"4\">\n\t\t\t\t\t\t<!-- 错误类型筛选 -->\n\t\t\t\t\t\t<el-form-item label=\"错误类型\">\n\t\t\t\t\t\t\t<el-select\n\t\t\t\t\t\t\t\tv-model=\"formData.errorType\"\n\t\t\t\t\t\t\t\tplaceholder=\"错误类型\"\n\t\t\t\t\t\t\t\tclearable\n\t\t\t\t\t\t\t\t@change=\"handleErrorTypeChange\"\n\t\t\t\t\t\t\t\tclass=\"full-width\">\n\t\t\t\t\t\t\t\t<el-option v-for=\"item in errorTypes\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\n\t\t\t\t\t\t\t</el-select>\n\t\t\t\t\t\t</el-form-item>\n\t\t\t\t\t</el-col>\n\n\t\t\t\t\t<el-col :xs=\"24\" :sm=\"12\" :md=\"6\" :lg=\"4\" :xl=\"4\">\n\t\t\t\t\t\t<!-- 排序方式 -->\n\t\t\t\t\t\t<el-form-item label=\"排序方式\">\n\t\t\t\t\t\t\t<el-select v-model=\"formData.sortBy\" placeholder=\"排序方式\" @change=\"handleSortChange\" class=\"full-width\">\n\t\t\t\t\t\t\t\t<el-option v-for=\"item in sortOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\n\t\t\t\t\t\t\t</el-select>\n\t\t\t\t\t\t</el-form-item>\n\t\t\t\t\t</el-col>\n\n\t\t\t\t\t<el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"4\" :xl=\"4\" class=\"action-col\">\n\t\t\t\t\t\t<!-- 刷新按钮 -->\n\t\t\t\t\t\t<el-form-item label=\"\" class=\"button-form-item\">\n\t\t\t\t\t\t\t<el-button type=\"primary\" @click=\"refreshData\" class=\"refresh-button\">\n\t\t\t\t\t\t\t\t<el-icon><Refresh /></el-icon>\n\t\t\t\t\t\t\t\t刷新\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-form-item>\n\t\t\t\t\t</el-col>\n\t\t\t\t</el-row>\n\t\t\t</el-form>\n\t\t</el-card>\n\t</div>\n</template>\n\n<style scoped lang=\"less\">\n.error-filter {\n\tmargin-bottom: 20px;\n\n\t.filter-card {\n\t\tbackground-color: #f5f7fa;\n\t}\n\n\t.filter-form {\n\t\twidth: 100%;\n\n\t\t.full-width {\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.button-form-item {\n\t\t\t// 对齐其他表单项的输入框\n\t\t\tmargin-top: 32px;\n\n\t\t\t@media (max-width: 992px) {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\t\t}\n\n\t\t.refresh-button {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\n\t// 表单项样式\n\t:deep(.el-form-item__label) {\n\t\tpadding-bottom: 4px;\n\t\tfont-weight: 500;\n\t}\n\n\t// 表单项内容样式\n\t:deep(.el-form-item__content) {\n\t\tline-height: 32px;\n\t}\n\n\t// 时间范围选择器样式\n\t:deep(.el-date-editor) {\n\t\twidth: 100%;\n\t}\n\n\t// 响应式调整\n\t@media (max-width: 768px) {\n\t\t.action-col {\n\t\t\tmargin-top: 10px;\n\t\t}\n\t}\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue'\nimport { ElMessage, ElUpload } from 'element-plus'\nimport type { UploadFile, UploadFiles } from 'element-plus'\nimport { uploadSourceMap, getEventDetail } from '../../../api'\nimport type { EventDetail } from '../../../api'\n\nconst props = defineProps<{\n\tvisible: boolean\n\terrorId: string\n}>()\n\nconst emit = defineEmits(['update:visible'])\n\n// 错误详情数据\nconst errorDetail = ref<EventDetail | null>(null)\n// 加载状态\nconst loading = ref(false)\n// 上传状态\nconst uploading = ref(false)\n// 是否已上传SourceMap\nconst hasUploadedSourceMap = ref(false)\n// 选中的文件\nconst sourceMapFile = ref<UploadFile | null>(null)\n\n// 判断是否有解析后的堆栈信息\nconst hasParsedStack = computed(() => {\n\treturn errorDetail.value?.payload.parsedStack && errorDetail.value.payload.parsedStack.length > 0\n})\n\n// 原始堆栈信息\nconst originalStack = computed(() => {\n\treturn errorDetail.value?.payload.stack || '无堆栈信息'\n})\n\n// 关闭弹窗\nconst handleClose = () => {\n\temit('update:visible', false)\n}\n\n// 获取错误详情数据\nconst fetchErrorDetail = async () => {\n\tif (!props.errorId) return\n\n\ttry {\n\t\tloading.value = true\n\t\tconsole.log('获取错误详情数据，错误ID:', props.errorId)\n\n\t\tconst data = await getEventDetail(props.errorId)\n\t\terrorDetail.value = data\n\t\tconsole.log('错误详情数据:', data)\n\t} catch (error) {\n\t\tconsole.error('获取错误详情数据失败:', error)\n\t\tElMessage.error('获取错误详情数据失败')\n\t} finally {\n\t\tloading.value = false\n\t}\n}\n\n// 格式化文件路径，提取文件名\nconst formatFilePath = (path: string) => {\n\tconst parts = path.split('/')\n\treturn parts[parts.length - 1]\n}\n\n// 计算文件路径的完整URL\nconst getFullUrl = (filePath: string) => {\n\tif (!errorDetail.value) return filePath\n\n\t// 如果是完整URL，直接返回\n\tif (filePath.startsWith('http')) {\n\t\treturn filePath\n\t}\n\n\t// 否则，基于错误发生页面的URL构建完整路径\n\ttry {\n\t\tconst baseUrl = new URL(errorDetail.value.payload.meta.url)\n\t\treturn new URL(filePath, baseUrl.origin).href\n\t} catch (e) {\n\t\treturn filePath\n\t}\n}\n\n// 处理文件选择变化\nconst handleFileChange = (uploadFile: UploadFile, uploadFiles: UploadFiles) => {\n\tsourceMapFile.value = uploadFile\n}\n\n// 上传SourceMap文件\nconst uploadMap = async () => {\n\tif (!sourceMapFile.value || !sourceMapFile.value.raw) {\n\t\tElMessage.warning('请先选择SourceMap文件')\n\t\treturn\n\t}\n\n\tif (!errorDetail.value) {\n\t\tElMessage.warning('错误详情数据不存在')\n\t\treturn\n\t}\n\n\ttry {\n\t\tuploading.value = true\n\t\tawait uploadSourceMap(errorDetail.value.appId, sourceMapFile.value.raw as File, '1.0.0')\n\t\tElMessage.success('SourceMap上传成功')\n\t\thasUploadedSourceMap.value = true\n\n\t\t// 重新获取错误详情，获取解析后的堆栈信息\n\t\tawait fetchErrorDetail()\n\t} catch (error) {\n\t\tconsole.error('上传SourceMap失败:', error)\n\t\tElMessage.error('上传SourceMap失败')\n\t} finally {\n\t\tuploading.value = false\n\t}\n}\n\n// 监听弹窗可见性变化\nwatch(\n\t() => props.visible,\n\tnewVal => {\n\t\tif (newVal && props.errorId) {\n\t\t\tfetchErrorDetail()\n\t\t}\n\t},\n)\n</script>\n\n<template>\n\t<el-dialog\n\t\ttitle=\"错误源码详情\"\n\t\tv-model=\"props.visible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"source-code-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 未解析堆栈时显示上传SourceMap区域 -->\n\t\t\t<div v-if=\"!hasParsedStack\" class=\"upload-section\">\n\t\t\t\t<div class=\"upload-tip\">\n\t\t\t\t\t<el-alert\n\t\t\t\t\t\ttitle=\"需要上传SourceMap文件以查看源码\"\n\t\t\t\t\t\ttype=\"info\"\n\t\t\t\t\t\tdescription=\"上传对应版本的SourceMap文件，系统将自动解析错误堆栈并显示源码\"\n\t\t\t\t\t\tshow-icon\n\t\t\t\t\t\t:closable=\"false\" />\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"upload-area\">\n\t\t\t\t\t<el-upload\n\t\t\t\t\t\tclass=\"sourcemap-uploader\"\n\t\t\t\t\t\taction=\"#\"\n\t\t\t\t\t\t:auto-upload=\"false\"\n\t\t\t\t\t\t:limit=\"1\"\n\t\t\t\t\t\taccept=\".map,.json\"\n\t\t\t\t\t\t:on-change=\"handleFileChange\">\n\t\t\t\t\t\t<el-button type=\"primary\" :loading=\"uploading\">选择SourceMap文件</el-button>\n\t\t\t\t\t\t<template #tip>\n\t\t\t\t\t\t\t<div class=\"el-upload__tip\">请上传.map格式的SourceMap文件</div>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</el-upload>\n\n\t\t\t\t\t<el-button type=\"success\" :disabled=\"!sourceMapFile\" :loading=\"uploading\" @click=\"uploadMap\">\n\t\t\t\t\t\t上传并解析\n\t\t\t\t\t</el-button>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- 原始堆栈信息 -->\n\t\t\t\t<div class=\"stack-section\">\n\t\t\t\t\t<h3>原始错误堆栈</h3>\n\t\t\t\t\t<pre class=\"original-stack\">{{ originalStack }}</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- 已解析堆栈时显示源码 -->\n\t\t\t<div v-else class=\"parsed-stack-section\">\n\t\t\t\t<h3>解析后的错误堆栈</h3>\n\t\t\t\t<div class=\"parsed-stack\">\n\t\t\t\t\t<div v-for=\"(frame, index) in errorDetail?.payload.parsedStack\" :key=\"index\" class=\"stack-frame\">\n\t\t\t\t\t\t<div class=\"frame-number\">{{ index + 1 }}</div>\n\t\t\t\t\t\t<div class=\"frame-content\">\n\t\t\t\t\t\t\t<div class=\"frame-function\">{{ frame.func || '(匿名函数)' }}</div>\n\t\t\t\t\t\t\t<div class=\"frame-location\">\n\t\t\t\t\t\t\t\t<el-link :href=\"getFullUrl(frame.file)\" target=\"_blank\" :underline=\"false\" class=\"file-link\">\n\t\t\t\t\t\t\t\t\t{{ formatFilePath(frame.file) }}\n\t\t\t\t\t\t\t\t</el-link>\n\t\t\t\t\t\t\t\t<span class=\"line-column\">:{{ frame.line }}:{{ frame.column }}</span>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<!-- 源码预览区域 -->\n\t\t\t\t\t\t\t<div class=\"source-code-preview\">\n\t\t\t\t\t\t\t\t<div class=\"code-line\" :class=\"{ 'error-line': i === 5 }\" v-for=\"(_, i) in 10\" :key=\"i\">\n\t\t\t\t\t\t\t\t\t<span class=\"line-number\">{{ frame.line - 5 + i }}</span>\n\t\t\t\t\t\t\t\t\t<code class=\"code-content\">\n\t\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t\ti === 5\n\t\t\t\t\t\t\t\t\t\t\t\t? '// 这里是错误发生的行（实际内容需要从服务端获取）'\n\t\t\t\t\t\t\t\t\t\t\t\t: '// 源码行 ' + (frame.line - 5 + i)\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</el-dialog>\n</template>\n\n<style scoped lang=\"less\">\n.source-code-dialog {\n\t.upload-section {\n\t\t.upload-tip {\n\t\t\tmargin-bottom: 20px;\n\t\t}\n\n\t\t.upload-area {\n\t\t\tdisplay: flex;\n\t\t\talign-items: flex-start;\n\t\t\tmargin-bottom: 20px;\n\n\t\t\t.sourcemap-uploader {\n\t\t\t\tmargin-right: 20px;\n\t\t\t}\n\t\t}\n\t}\n\n\t.stack-section {\n\t\tmargin-top: 20px;\n\n\t\th3 {\n\t\t\tfont-size: 16px;\n\t\t\tmargin-bottom: 10px;\n\t\t}\n\n\t\t.original-stack {\n\t\t\tfont-family: monospace;\n\t\t\tfont-size: 14px;\n\t\t\tline-height: 1.5;\n\t\t\tbackground-color: #f5f7fa;\n\t\t\tpadding: 15px;\n\t\t\tborder-radius: 4px;\n\t\t\toverflow-x: auto;\n\t\t\twhite-space: pre-wrap;\n\t\t\tcolor: #606266;\n\t\t}\n\t}\n\n\t.parsed-stack-section {\n\t\th3 {\n\t\t\tfont-size: 16px;\n\t\t\tmargin-bottom: 10px;\n\t\t}\n\n\t\t.parsed-stack {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\n\t\t\t.stack-frame {\n\t\t\t\tdisplay: flex;\n\t\t\t\tmargin-bottom: 20px;\n\t\t\t\tpadding-bottom: 20px;\n\t\t\t\tborder-bottom: 1px solid #ebeef5;\n\n\t\t\t\t&:last-child {\n\t\t\t\t\tborder-bottom: none;\n\t\t\t\t}\n\n\t\t\t\t.frame-number {\n\t\t\t\t\twidth: 30px;\n\t\t\t\t\theight: 30px;\n\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\tbackground-color: #f5f7fa;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tcolor: #606266;\n\t\t\t\t\tmargin-right: 15px;\n\t\t\t\t\tflex-shrink: 0;\n\t\t\t\t}\n\n\t\t\t\t.frame-content {\n\t\t\t\t\tflex: 1;\n\n\t\t\t\t\t.frame-function {\n\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\tfont-weight: 500;\n\t\t\t\t\t\tcolor: #303133;\n\t\t\t\t\t\tmargin-bottom: 5px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.frame-location {\n\t\t\t\t\t\tfont-size: 13px;\n\t\t\t\t\t\tcolor: #606266;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\t\tmargin-bottom: 10px;\n\n\t\t\t\t\t\t.file-link {\n\t\t\t\t\t\t\tmargin-right: 5px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.line-column {\n\t\t\t\t\t\t\tcolor: #909399;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t.source-code-preview {\n\t\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\t\tbackground-color: #f5f7fa;\n\t\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\t\toverflow: hidden;\n\n\t\t\t\t\t\t.code-line {\n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\t\tline-height: 1.5;\n\n\t\t\t\t\t\t\t&.error-line {\n\t\t\t\t\t\t\t\tbackground-color: rgba(245, 108, 108, 0.1);\n\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.line-number {\n\t\t\t\t\t\t\t\twidth: 50px;\n\t\t\t\t\t\t\t\tpadding: 2px 10px;\n\t\t\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t\t\t\tcolor: #909399;\n\t\t\t\t\t\t\t\tbackground-color: rgba(0, 0, 0, 0.05);\n\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.code-content {\n\t\t\t\t\t\t\t\tflex: 1;\n\t\t\t\t\t\t\t\tpadding: 2px 10px;\n\t\t\t\t\t\t\t\twhite-space: pre;\n\t\t\t\t\t\t\t\toverflow-x: auto;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { getEventDetail } from '../../../api'\nimport type { EventDetail } from '../../../api'\n\nimport Replayer from 'rrweb-player'\nimport 'rrweb-player/dist/style.css'\n\nconst props = defineProps<{\n\tvisible: boolean\n\terrorId: string\n}>()\n\nconst emit = defineEmits(['update:visible'])\n\n// 错误详情数据\nconst errorDetail = ref<EventDetail | null>(null)\n// 加载状态\nconst loading = ref(false)\n// 播放器容器引用\nconst playerContainer = ref<HTMLDivElement | null>(null)\n// 播放器实例\nconst playerInstance = ref<any>(null)\n\n// 判断是否有录屏数据\nconst hasRrwebData = computed(() => {\n\treturn errorDetail.value?.payload.rrwebData && errorDetail.value.payload.rrwebData.length > 0\n})\n\n// 关闭弹窗\nconst handleClose = () => {\n\temit('update:visible', false)\n}\n\n// 获取错误详情数据\nconst fetchErrorDetail = async () => {\n\tif (!props.errorId) return\n\n\ttry {\n\t\tloading.value = true\n\t\tconsole.log('获取错误详情数据，错误ID:', props.errorId)\n\n\t\tconst data = await getEventDetail(props.errorId)\n\t\terrorDetail.value = data\n\t\tconsole.log('错误详情数据:', data)\n\n\t\t// 获取数据后初始化播放器\n\t\tif (data.payload.rrwebData && data.payload.rrwebData.length > 0) {\n\t\t\t// 延迟初始化，确保DOM已更新\n\t\t\tsetTimeout(() => {\n\t\t\t\tinitPlayer()\n\t\t\t}, 100)\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('获取错误详情数据失败:', error)\n\t\tElMessage.error('获取错误详情数据失败')\n\t} finally {\n\t\tloading.value = false\n\t}\n}\n\n// 初始化播放器\nconst initPlayer = async () => {\n\tif (!hasRrwebData.value || !playerContainer.value || !errorDetail.value) return\n\n\ttry {\n\t\t// 销毁旧的播放器实例\n\t\tif (playerInstance.value) {\n\t\t\tplayerInstance.value.$destroy()\n\t\t\tplayerInstance.value = null\n\t\t}\n\n\t\t// 创建新的播放器实例\n\t\tplayerInstance.value = new Replayer({\n\t\t\ttarget: playerContainer.value,\n\t\t\tprops: {\n\t\t\t\tevents: errorDetail.value.payload?.rrwebData || [],\n\t\t\t\tshowController: true,\n\t\t\t\tautoPlay: false,\n\t\t\t\twidth: playerContainer.value.clientWidth,\n\t\t\t\theight: Math.min(window.innerHeight * 0.6, 600),\n\t\t\t},\n\t\t})\n\n\t\tconsole.log('rrweb播放器初始化成功')\n\t} catch (error) {\n\t\tconsole.error('初始化rrweb播放器失败:', error)\n\t\tElMessage.error('初始化rrweb播放器失败')\n\t}\n}\n\n// 监听弹窗可见性变化\nwatch(\n\t() => props.visible,\n\tnewVal => {\n\t\tconsole.log('⭐==>', 111)\n\t\tif (newVal && props.errorId) {\n\t\t\tfetchErrorDetail()\n\t\t} else if (!newVal && playerInstance.value) {\n\t\t\t// 关闭弹窗时销毁播放器实例\n\t\t\tplayerInstance.value.$destroy()\n\t\t\tplayerInstance.value = null\n\t\t}\n\t},\n)\n\nonMounted(() => {})\n\nonBeforeUnmount(() => {\n\t// 销毁播放器实例\n\tif (playerInstance.value) {\n\t\tplayerInstance.value.$destroy()\n\t\tplayerInstance.value = null\n\t}\n})\n</script>\n\n<template>\n\t<el-dialog\n\t\ttitle=\"会话录屏回放\"\n\t\tv-model=\"props.visible\"\n\t\twidth=\"80%\"\n\t\tdestroy-on-close\n\t\t@close=\"handleClose\"\n\t\tclass=\"rrweb-player-dialog\">\n\t\t<div v-loading=\"loading\">\n\t\t\t<!-- 有录屏数据 -->\n\t\t\t<template v-if=\"hasRrwebData\">\n\t\t\t\t<div class=\"player-container-wrapper\">\n\t\t\t\t\t<div ref=\"playerContainer\" class=\"player-container\"></div>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<!-- 无录屏数据 -->\n\t\t\t<template v-else-if=\"!loading\">\n\t\t\t\t<el-empty description=\"暂无会话录屏数据\">\n\t\t\t\t\t<template #description>\n\t\t\t\t\t\t<p>该错误事件未包含会话录屏数据</p>\n\t\t\t\t\t\t<p class=\"empty-tip\">提示: 确保SDK配置中启用了rrweb插件，并设置了适当的录制模式</p>\n\t\t\t\t\t</template>\n\t\t\t\t</el-empty>\n\t\t\t</template>\n\t\t</div>\n\n\t\t<template #footer>\n\t\t\t<span class=\"dialog-footer\">\n\t\t\t\t<el-button @click=\"handleClose\">关闭</el-button>\n\t\t\t</span>\n\t\t</template>\n\t</el-dialog>\n</template>\n\n<style scoped lang=\"less\">\n.rrweb-player-dialog {\n\t.player-container-wrapper {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\n\t\t.player-container {\n\t\t\twidth: 100%;\n\t\t\tmin-height: 400px;\n\t\t\tbackground-color: #f5f7fa;\n\t\t\tborder-radius: 4px;\n\t\t}\n\t}\n\n\t.empty-tip {\n\t\tfont-size: 12px;\n\t\tcolor: #909399;\n\t\tmargin-top: 10px;\n\t}\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { formatDate } from '../../../utils'\nimport { getEventDetail } from '../../../api'\nimport type { EventDetail } from '../../../api'\n\nconst props = defineProps<{\n  visible: boolean\n  errorId: string\n}>()\n\nconst emit = defineEmits(['update:visible'])\n\n// 错误详情数据\nconst errorDetail = ref<EventDetail | null>(null)\n// 加载状态\nconst loading = ref(false)\n\n// 判断是否有行为栈数据\nconst hasBehaviorStack = computed(() => {\n  return errorDetail.value?.payload.behaviorStack && errorDetail.value.payload.behaviorStack.length > 0\n})\n\n// 获取行为栈数据，按时间倒序排列\nconst behaviorStack = computed(() => {\n  if (!hasBehaviorStack.value || !errorDetail.value) return []\n  \n  return [...errorDetail.value.payload.behaviorStack].sort((a, b) => b.timestamp - a.timestamp)\n})\n\n// 关闭弹窗\nconst handleClose = () => {\n  emit('update:visible', false)\n}\n\n// 获取错误详情数据\nconst fetchErrorDetail = async () => {\n  if (!props.errorId) return\n  \n  try {\n    loading.value = true\n    console.log('获取错误详情数据，错误ID:', props.errorId)\n\n    const data = await getEventDetail(props.errorId)\n    errorDetail.value = data\n    console.log('错误详情数据:', data)\n  } catch (error) {\n    console.error('获取错误详情数据失败:', error)\n    ElMessage.error('获取错误详情数据失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 获取行为类型的图标\nconst getBehaviorIcon = (type: string) => {\n  const iconMap: Record<string, string> = {\n    click: 'Pointer',\n    input: 'Edit',\n    navigation: 'Connection',\n    api: 'Link',\n    pageview: 'Document',\n    scroll: 'Sort',\n    resize: 'FullScreen',\n    keypress: 'Keyboard'\n  }\n  \n  return iconMap[type] || 'InfoFilled'\n}\n\n// 获取行为类型的标签类型\nconst getBehaviorTagType = (type: string) => {\n  const typeMap: Record<string, string> = {\n    click: 'primary',\n    input: 'success',\n    navigation: 'warning',\n    api: 'danger',\n    pageview: 'info',\n    scroll: '',\n    resize: '',\n    keypress: 'success'\n  }\n  \n  return typeMap[type] || ''\n}\n\n// 格式化行为时间\nconst formatBehaviorTime = (timestamp: number) => {\n  return formatDate(new Date(timestamp), 'HH:mm:ss.SSS')\n}\n\n// 获取行为详情\nconst getBehaviorDetail = (behavior: any) => {\n  switch (behavior.type) {\n    case 'click':\n      return `点击了 <${behavior.element}> 元素 \"${behavior.text || '未知内容'}\"`\n    case 'input':\n      return `在输入框中输入了内容`\n    case 'navigation':\n      return `从 ${behavior.from} 导航到 ${behavior.to}`\n    case 'api':\n      return `${behavior.method} 请求 ${behavior.url}，状态码: ${behavior.status}`\n    case 'pageview':\n      return `访问页面 ${behavior.url}，标题: ${behavior.title}`\n    case 'scroll':\n      return `滚动到位置 (${behavior.position.x}, ${behavior.position.y})`\n    case 'resize':\n      return `调整窗口大小`\n    case 'keypress':\n      return `按下键盘`\n    default:\n      return `${behavior.type} 行为`\n  }\n}\n\n// 监听弹窗可见性变化\nwatch(() => props.visible, (newVal) => {\n  if (newVal && props.errorId) {\n    fetchErrorDetail()\n  }\n})\n</script>\n\n<template>\n  <el-dialog\n    title=\"用户行为栈\"\n    v-model=\"props.visible\"\n    width=\"80%\"\n    destroy-on-close\n    @close=\"handleClose\"\n    class=\"behavior-stack-dialog\"\n  >\n    <div v-loading=\"loading\">\n      <!-- 有行为栈数据 -->\n      <template v-if=\"hasBehaviorStack\">\n        <div class=\"behavior-info\">\n          <el-alert\n            title=\"用户行为栈记录了错误发生前的用户操作序列\"\n            type=\"info\"\n            description=\"通过分析用户行为，可以更好地理解错误发生的上下文和复现路径\"\n            show-icon\n            :closable=\"false\"\n            class=\"behavior-info-alert\"\n          />\n          \n          <div class=\"behavior-count\">\n            <el-tag type=\"info\" size=\"large\">共 {{ behaviorStack.length }} 个行为记录</el-tag>\n          </div>\n        </div>\n        \n        <el-timeline class=\"behavior-timeline\">\n          <el-timeline-item\n            v-for=\"(behavior, index) in behaviorStack\"\n            :key=\"index\"\n            :type=\"getBehaviorTagType(behavior.type)\"\n            :icon=\"getBehaviorIcon(behavior.type)\"\n            :timestamp=\"formatBehaviorTime(behavior.timestamp)\"\n            size=\"large\"\n          >\n            <div class=\"behavior-item\">\n              <div class=\"behavior-type\">\n                <el-tag size=\"small\" :type=\"getBehaviorTagType(behavior.type)\">{{ behavior.type }}</el-tag>\n              </div>\n              <div class=\"behavior-detail\">{{ getBehaviorDetail(behavior) }}</div>\n              \n              <!-- 行为详情 -->\n              <div v-if=\"behavior.type === 'click' && behavior.position\" class=\"behavior-extra-info\">\n                <div class=\"position-info\">\n                  点击位置: ({{ behavior.position.x }}, {{ behavior.position.y }})\n                </div>\n              </div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n      </template>\n      \n      <!-- 无行为栈数据 -->\n      <template v-else-if=\"!loading\">\n        <el-empty description=\"暂无用户行为记录\">\n          <template #description>\n            <p>该错误事件未包含用户行为栈数据</p>\n            <p class=\"empty-tip\">提示: 确保SDK配置中启用了behaviorStack插件，并设置了适当的记录模式</p>\n          </template>\n        </el-empty>\n      </template>\n    </div>\n    \n    <template #footer>\n      <span class=\"dialog-footer\">\n        <el-button @click=\"handleClose\">关闭</el-button>\n      </span>\n    </template>\n  </el-dialog>\n</template>\n\n<style scoped lang=\"less\">\n.behavior-stack-dialog {\n  .behavior-info {\n    margin-bottom: 20px;\n    \n    .behavior-info-alert {\n      margin-bottom: 15px;\n    }\n    \n    .behavior-count {\n      display: flex;\n      justify-content: flex-end;\n    }\n  }\n  \n  .behavior-timeline {\n    max-height: 60vh;\n    overflow-y: auto;\n    padding: 0 10px;\n    \n    .behavior-item {\n      padding: 5px 0;\n      \n      .behavior-type {\n        margin-bottom: 5px;\n      }\n      \n      .behavior-detail {\n        font-size: 14px;\n        color: #303133;\n        line-height: 1.5;\n        margin-bottom: 5px;\n      }\n      \n      .behavior-extra-info {\n        font-size: 12px;\n        color: #909399;\n        background-color: #f5f7fa;\n        padding: 5px 10px;\n        border-radius: 4px;\n        margin-top: 5px;\n      }\n    }\n  }\n  \n  .empty-tip {\n    font-size: 12px;\n    color: #909399;\n    margin-top: 10px;\n  }\n  \n  :deep(.el-timeline-item__timestamp) {\n    font-size: 12px;\n    color: #909399;\n  }\n  \n  :deep(.el-timeline-item__node) {\n    background-color: transparent;\n  }\n  \n  :deep(.el-timeline-item__wrapper) {\n    padding-left: 20px;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue'\nimport { formatTimeAgo, truncateString } from '../../utils'\nimport type { ErrorItem } from '../../api'\nimport SourceCodeDialog from './dialogs/SourceCodeDialog.vue'\nimport RrwebPlayerDialog from './dialogs/RrwebPlayerDialog.vue'\nimport BehaviorStackDialog from './dialogs/BehaviorStackDialog.vue'\n\n// 定义组件属性\ninterface Props {\n\tdata: ErrorItem[]\n\ttotal: number\n\tloading?: boolean\n\tpage?: number\n\tpageSize?: number\n\tsortBy?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n\tloading: false,\n\tpage: 1,\n\tpageSize: 20,\n\tsortBy: 'lastSeen_desc',\n})\n\n// 定义事件\nconst emit = defineEmits(['update:page', 'update:pageSize', 'update:sortBy', 'refresh'])\n\n// 当前页码\nconst currentPage = ref(props.page)\n// 当前每页条数\nconst currentPageSize = ref(props.pageSize)\n// 当前排序方式\nconst currentSortBy = ref(props.sortBy)\n\n// 弹窗状态\nconst sourceCodeDialogVisible = ref(false)\nconst rrwebPlayerDialogVisible = ref(false)\nconst behaviorStackDialogVisible = ref(false)\nconst currentErrorId = ref('')\n\n// 监听属性变化\nwatch(\n\t() => props.page,\n\tnewVal => {\n\t\tcurrentPage.value = newVal\n\t},\n)\n\nwatch(\n\t() => props.pageSize,\n\tnewVal => {\n\t\tcurrentPageSize.value = newVal\n\t},\n)\n\nwatch(\n\t() => props.sortBy,\n\tnewVal => {\n\t\tcurrentSortBy.value = newVal\n\t},\n)\n\n// 页码变化处理\nconst handlePageChange = (page: number) => {\n\tcurrentPage.value = page\n\temit('update:page', page)\n\temit('refresh')\n}\n\n// 每页条数变化处理\nconst handleSizeChange = (size: number) => {\n\tcurrentPageSize.value = size\n\tcurrentPage.value = 1 // 重置为第一页\n\temit('update:pageSize', size)\n\temit('update:page', 1)\n\temit('refresh')\n}\n\n// 排序变化处理\nconst handleSortChange = ({ prop, order }: { prop: string; order: string }) => {\n\tif (!prop || !order) return\n\n\tconst sortOrder = order === 'descending' ? 'desc' : 'asc'\n\tconst sortBy = `${prop}_${sortOrder}`\n\n\tcurrentSortBy.value = sortBy\n\temit('update:sortBy', sortBy)\n\temit('refresh')\n}\n\n// 查看源码\nconst viewSourceCode = (row: ErrorItem, event: Event) => {\n\tevent.stopPropagation() // 阻止事件冒泡\n\tcurrentErrorId.value = row.sampleEventId\n\tsourceCodeDialogVisible.value = true\n\tconsole.log('查看源码:', row.sampleEventId)\n}\n\n// 播放录屏\nconst playRrweb = (row: ErrorItem, event: Event) => {\n\tevent.stopPropagation() // 阻止事件冒泡\n\tcurrentErrorId.value = row.sampleEventId\n\trrwebPlayerDialogVisible.value = true\n\tconsole.log('播放录屏:', row.sampleEventId)\n}\n\n// 查看用户行为\nconst viewBehaviorStack = (row: ErrorItem, event: Event) => {\n\tevent.stopPropagation() // 阻止事件冒泡\n\tcurrentErrorId.value = row.sampleEventId\n\tbehaviorStackDialogVisible.value = true\n\tconsole.log('查看用户行为:', row.sampleEventId)\n}\n\n// 计算错误类型的标签类型\nconst getErrorTypeTag = (type: string) => {\n\tconst typeMap: Record<string, string> = {\n\t\tTypeError: 'danger',\n\t\tReferenceError: 'warning',\n\t\tSyntaxError: 'info',\n\t\tRangeError: 'warning',\n\t\tURIError: 'info',\n\t\tEvalError: 'danger',\n\t\tInternalError: 'danger',\n\t}\n\n\treturn typeMap[type] || 'info'\n}\n\n// 空数据状态\nconst isEmpty = computed(() => !props.loading && (!props.data || props.data.length === 0))\n\n// 显示空数据提示\nconst showEmptyText = computed(() => {\n\treturn isEmpty.value ? '暂无错误数据' : ''\n})\n</script>\n\n<template>\n\t<div class=\"error-table-container\">\n\t\t<el-table\n\t\t\tv-loading=\"loading\"\n\t\t\t:data=\"data\"\n\t\t\tstyle=\"width: 100%\"\n\t\t\t@sort-change=\"handleSortChange\"\n\t\t\trow-key=\"fingerprint\"\n\t\t\tborder\n\t\t\tstripe\n\t\t\t:empty-text=\"showEmptyText\"\n\t\t\thighlight-current-row>\n\t\t\t<!-- 错误类型列 -->\n\t\t\t<el-table-column prop=\"type\" label=\"错误类型\" width=\"120\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<el-tag :type=\"getErrorTypeTag(row.type)\" size=\"small\">{{ row.type }}</el-tag>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\n\t\t\t<!-- 错误信息列 -->\n\t\t\t<el-table-column prop=\"message\" label=\"错误信息\" min-width=\"300\" show-overflow-tooltip>\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<div class=\"error-message ellipsis\">{{ row.message }}</div>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\n\t\t\t<!-- 发生次数列 -->\n\t\t\t<el-table-column prop=\"count\" label=\"发生次数\" align=\"center\" width=\"100\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span class=\"error-count\">{{ row.count }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\n\t\t\t<!-- 影响用户数列 -->\n\t\t\t<el-table-column prop=\"userCount\" label=\"影响用户数\" align=\"center\" width=\"100\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span>{{ row.userCount }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\n\t\t\t<!-- 最后发生列 -->\n\t\t\t<el-table-column prop=\"lastSeen\" label=\"最后发生\" align=\"center\" width=\"150\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span>{{ formatTimeAgo(row.lastSeen) }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\n\t\t\t<!-- 浏览器 -->\n\t\t\t<!-- <el-table-column prop=\"payload.meta.browser\" label=\"浏览器\" align=\"center\" width=\"100\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span>{{ row.payload?.meta?.browser }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column> -->\n\n\t\t\t<!-- 操作系统 -->\n\t\t\t<!-- <el-table-column prop=\"payload.meta.os\" label=\"操作系统\" align=\"center\" width=\"100\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span>{{ row.payload?.meta?.os }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column> -->\n\n\t\t\t<!-- 设备类型 -->\n\t\t\t<!-- <el-table-column prop=\"payload.meta.device\" label=\"设备类型\" align=\"center\" width=\"100\" sortable=\"custom\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<span>{{ row.payload?.meta?.device }}</span>\n\t\t\t\t</template>\n\t\t\t</el-table-column> -->\n\n\t\t\t<!-- 操作列 -->\n\t\t\t<el-table-column label=\"操作\" width=\"200\" align=\"center\" fixed=\"right\">\n\t\t\t\t<template #default=\"{ row }\">\n\t\t\t\t\t<div class=\"operation-buttons\">\n\t\t\t\t\t\t<el-tooltip content=\"查看源码\" placement=\"top\">\n\t\t\t\t\t\t\t<el-button type=\"primary\" size=\"small\" circle @click=\"viewSourceCode(row, $event)\">\n\t\t\t\t\t\t\t\t<el-icon><Document /></el-icon>\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-tooltip>\n\n\t\t\t\t\t\t<el-tooltip content=\"播放录屏\" placement=\"top\">\n\t\t\t\t\t\t\t<el-button type=\"success\" size=\"small\" circle @click=\"playRrweb(row, $event)\">\n\t\t\t\t\t\t\t\t<el-icon><VideoPlay /></el-icon>\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-tooltip>\n\n\t\t\t\t\t\t<el-tooltip content=\"查看用户行为\" placement=\"top\">\n\t\t\t\t\t\t\t<el-button type=\"warning\" size=\"small\" circle @click=\"viewBehaviorStack(row, $event)\">\n\t\t\t\t\t\t\t\t<el-icon><List /></el-icon>\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-tooltip>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\t\t</el-table>\n\n\t\t<!-- 分页 -->\n\t\t<div class=\"pagination-container\">\n\t\t\t<el-pagination\n\t\t\t\tv-model:current-page=\"currentPage\"\n\t\t\t\tv-model:page-size=\"currentPageSize\"\n\t\t\t\t:page-sizes=\"[10, 20, 50, 100]\"\n\t\t\t\tlayout=\"total, sizes, prev, pager, next, jumper\"\n\t\t\t\t:total=\"total\"\n\t\t\t\t@size-change=\"handleSizeChange\"\n\t\t\t\t@current-change=\"handlePageChange\" />\n\t\t</div>\n\n\t\t<!-- 弹窗组件 -->\n\t\t<SourceCodeDialog v-model:visible=\"sourceCodeDialogVisible\" :error-id=\"currentErrorId\" />\n\n\t\t<RrwebPlayerDialog v-model:visible=\"rrwebPlayerDialogVisible\" :error-id=\"currentErrorId\" />\n\n\t\t<BehaviorStackDialog v-model:visible=\"behaviorStackDialogVisible\" :error-id=\"currentErrorId\" />\n\t</div>\n</template>\n\n<style scoped lang=\"less\">\n.error-table-container {\n\tmargin-bottom: 20px;\n\n\t.error-message {\n\t\tcolor: #303133;\n\t\tline-height: 1.4;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\twhite-space: nowrap;\n\t}\n\n\t.ellipsis {\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\twhite-space: nowrap;\n\t}\n\n\t.error-count {\n\t\tcolor: #f56c6c;\n\t\tfont-weight: bold;\n\t}\n\n\t.pagination-container {\n\t\tmargin-top: 20px;\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t}\n\n\t.operation-buttons {\n\t\tdisplay: flex;\n\t\tjustify-content: space-around;\n\t\talign-items: center;\n\n\t\t.el-button {\n\t\t\tmargin-left: 0;\n\t\t\tmargin-right: 0;\n\t\t}\n\t}\n\n\t:deep(.el-table__row) {\n\t\t&:hover {\n\t\t\tbackground-color: #f5f7fa !important;\n\t\t}\n\t}\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, onMounted, watch } from 'vue'\nimport { useAppStore } from '../../store/app'\nimport { getErrors } from '../../api'\nimport { ElMessage } from 'element-plus'\nimport ErrorFilter from '../../components/error/ErrorFilter.vue'\nimport ErrorTable from '../../components/error/ErrorTable.vue'\nimport type { ErrorItem } from '../../api'\n\nconst appStore = useAppStore()\n\n// 错误列表数据\nconst errorList = ref<ErrorItem[]>([])\n// 错误总数\nconst total = ref(0)\n// 加载状态\nconst loading = ref(false)\n\n// 分页和筛选参数\nconst page = ref(1)\nconst pageSize = ref(20)\nconst errorType = ref('')\nconst sortBy = ref('lastSeen_desc')\n\n// 获取错误列表数据\nconst fetchErrorList = async () => {\n\ttry {\n\t\tloading.value = true\n\t\tconsole.log('获取错误列表数据，参数:', {\n\t\t\tappId: appStore.appId,\n\t\t\tstartTime: appStore.startTime,\n\t\t\tendTime: appStore.endTime,\n\t\t\tpage: page.value,\n\t\t\tlimit: pageSize.value,\n\t\t\tsortBy: sortBy.value,\n\t\t\terrorType: errorType.value,\n\t\t})\n\n\t\t// 构建API请求参数\n\t\tconst params: any = {\n\t\t\tappId: appStore.appId,\n\t\t\tstartTime: appStore.startTime,\n\t\t\tendTime: appStore.endTime,\n\t\t\tpage: page.value,\n\t\t\tlimit: pageSize.value,\n\t\t\tsortBy: sortBy.value,\n\t\t}\n\n\t\t// 如果有错误类型筛选，添加到参数中\n\t\tif (errorType.value) {\n\t\t\tparams.errorType = errorType.value\n\t\t}\n\n\t\tconst data = await getErrors(\n\t\t\tappStore.appId,\n\t\t\tappStore.startTime,\n\t\t\tappStore.endTime,\n\t\t\tpage.value,\n\t\t\tpageSize.value,\n\t\t\tsortBy.value,\n\t\t)\n\n\t\terrorList.value = data.items\n\t\ttotal.value = data.total\n\t\tconsole.log('错误列表数据:', data)\n\t} catch (error) {\n\t\tconsole.error('获取错误列表数据失败:', error)\n\t\tElMessage.error('获取错误列表数据失败')\n\t} finally {\n\t\tloading.value = false\n\t}\n}\n\n// 监听时间范围变化，重新加载数据\nwatch(\n\t() => [appStore.appId, appStore.startTime, appStore.endTime],\n\t() => {\n\t\tpage.value = 1 // 重置为第一页\n\t\tfetchErrorList()\n\t},\n)\n\n// 刷新数据\nconst refreshData = () => {\n\tfetchErrorList()\n}\n\nonMounted(() => {\n\tconsole.log('Error页面已挂载')\n\tfetchErrorList()\n})\n</script>\n\n<template>\n\t<div class=\"error-container\">\n\t\t<div class=\"error-header\">\n\t\t\t<h2 class=\"page-title\">错误监控</h2>\n\t\t\t<p class=\"page-description\">查看和分析应用中的JavaScript错误</p>\n\t\t</div>\n\n\t\t<!-- 筛选组件 -->\n\t\t<ErrorFilter v-model:error-type=\"errorType\" v-model:sort-by=\"sortBy\" @refresh=\"refreshData\" />\n\n\t\t<!-- 错误列表表格 -->\n\t\t<ErrorTable\n\t\t\t:data=\"errorList\"\n\t\t\t:total=\"total\"\n\t\t\t:loading=\"loading\"\n\t\t\t:page=\"page\"\n\t\t\t:page-size=\"pageSize\"\n\t\t\t:sort-by=\"sortBy\"\n\t\t\t@update:page=\"page = $event\"\n\t\t\t@update:page-size=\"pageSize = $event\"\n\t\t\t@update:sort-by=\"sortBy = $event\"\n\t\t\t@refresh=\"refreshData\" />\n\t</div>\n</template>\n\n<style scoped lang=\"less\">\n.error-container {\n\tpadding: 20px;\n}\n\n.error-header {\n\tmargin-bottom: 20px;\n}\n\n.page-title {\n\tmargin: 0 0 10px 0;\n\tfont-size: 24px;\n\tfont-weight: 600;\n\tcolor: #303133;\n}\n\n.page-description {\n\tmargin: 0;\n\tcolor: #606266;\n\tfont-size: 14px;\n}\n</style>\n"],"names":["errorTypes","sortOptions","props","__props","emit","__emit","appStore","useAppStore","formData","reactive","watch","newVal","handleErrorTypeChange","value","handleSortChange","handleTimeRangeChange","timeRange","refreshData","errorDetail","ref","loading","uploading","hasUploadedSourceMap","sourceMapFile","hasParsedStack","computed","_a","originalStack","handleClose","fetchErrorDetail","data","getEventDetail","error","ElMessage","formatFilePath","path","parts","getFullUrl","filePath","baseUrl","handleFileChange","uploadFile","uploadFiles","uploadMap","uploadSourceMap","playerContainer","playerInstance","hasRrwebData","initPlayer","Replayer","onMounted","onBeforeUnmount","hasBehaviorStack","behaviorStack","a","b","getBehaviorIcon","type","getBehaviorTagType","formatBehaviorTime","timestamp","formatDate","getBehaviorDetail","behavior","currentPage","currentPageSize","currentSortBy","sourceCodeDialogVisible","rrwebPlayerDialogVisible","behaviorStackDialogVisible","currentErrorId","handlePageChange","page","handleSizeChange","size","prop","order","sortBy","viewSourceCode","row","event","playRrweb","viewBehaviorStack","getErrorTypeTag","isEmpty","showEmptyText","errorList","total","pageSize","errorType","fetchErrorList","params","getErrors"],"mappings":"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"}