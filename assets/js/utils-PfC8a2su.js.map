{"version":3,"file":"utils-PfC8a2su.js","sources":["../../../src/utils/index.ts"],"sourcesContent":["/**\n * 格式化日期\n * @param date 日期对象或日期字符串\n * @param format 格式化模板，默认为 'YYYY-MM-DD HH:mm:ss'\n * @returns 格式化后的日期字符串\n */\nexport function formatDate(date: Date | string, format: string = 'YYYY-MM-DD HH:mm:ss'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  \n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hours = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  \n  const o: Record<string, number> = {\n    'M+': month,\n    'D+': day,\n    'H+': hours,\n    'h+': hours % 12 || 12,\n    'm+': minutes,\n    's+': seconds,\n    'q+': Math.floor((month + 2) / 3),\n    'S': d.getMilliseconds()\n  };\n  \n  let formatted = format;\n  \n  if (/(Y+)/.test(format)) {\n    formatted = format.replace(RegExp.$1, (year + '').substr(4 - RegExp.$1.length));\n  }\n  \n  for (const k in o) {\n    if (new RegExp('(' + k + ')').test(formatted)) {\n      formatted = formatted.replace(\n        RegExp.$1,\n        RegExp.$1.length === 1 ? o[k] + '' : ('00' + o[k]).substr(('' + o[k]).length)\n      );\n    }\n  }\n  \n  return formatted;\n}\n\n/**\n * 格式化时间差\n * @param timestamp 时间戳（毫秒）\n * @returns 格式化后的时间差字符串，如\"3天前\"、\"2小时前\"等\n */\nexport function formatTimeAgo(timestamp: number | string): string {\n  const date = typeof timestamp === 'string' ? new Date(timestamp).getTime() : timestamp;\n  const now = Date.now();\n  const diff = now - date;\n  \n  const minute = 60 * 1000;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = day * 30;\n  const year = day * 365;\n  \n  if (diff < minute) {\n    return '刚刚';\n  } else if (diff < hour) {\n    return Math.floor(diff / minute) + '分钟前';\n  } else if (diff < day) {\n    return Math.floor(diff / hour) + '小时前';\n  } else if (diff < week) {\n    return Math.floor(diff / day) + '天前';\n  } else if (diff < month) {\n    return Math.floor(diff / week) + '周前';\n  } else if (diff < year) {\n    return Math.floor(diff / month) + '个月前';\n  } else {\n    return Math.floor(diff / year) + '年前';\n  }\n}\n\n/**\n * 格式化文件大小\n * @param bytes 字节数\n * @param decimals 小数位数，默认为2\n * @returns 格式化后的文件大小字符串，如\"1.5 KB\"、\"2.3 MB\"等\n */\nexport function formatFileSize(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * 截断字符串\n * @param str 原始字符串\n * @param maxLength 最大长度，默认为50\n * @returns 截断后的字符串，超出长度会添加省略号\n */\nexport function truncateString(str: string, maxLength: number = 50): string {\n  if (!str) return '';\n  return str.length > maxLength ? str.substring(0, maxLength) + '...' : str;\n}\n\n/**\n * 格式化性能指标时间\n * @param ms 毫秒数\n * @returns 格式化后的时间字符串，如\"1.5s\"、\"300ms\"等\n */\nexport function formatPerformanceTime(ms: number): string {\n  if (ms >= 1000) {\n    return (ms / 1000).toFixed(2) + 's';\n  }\n  return Math.round(ms) + 'ms';\n}\n\n/**\n * 生成随机颜色\n * @returns 随机生成的十六进制颜色值\n */\nexport function randomColor(): string {\n  return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n}\n\n/**\n * 防抖函数\n * @param fn 需要防抖的函数\n * @param delay 延迟时间，默认为300ms\n * @returns 防抖后的函数\n */\nexport function debounce<T extends (...args: any[]) => any>(fn: T, delay: number = 300): (...args: Parameters<T>) => void {\n  let timer: number | null = null;\n  \n  return function(this: any, ...args: Parameters<T>): void {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    \n    timer = window.setTimeout(() => {\n      fn.apply(this, args);\n      timer = null;\n    }, delay);\n  };\n}\n\n/**\n * 节流函数\n * @param fn 需要节流的函数\n * @param delay 延迟时间，默认为300ms\n * @returns 节流后的函数\n */\nexport function throttle<T extends (...args: any[]) => any>(fn: T, delay: number = 300): (...args: Parameters<T>) => void {\n  let lastTime = 0;\n  \n  return function(this: any, ...args: Parameters<T>): void {\n    const now = Date.now();\n    \n    if (now - lastTime >= delay) {\n      fn.apply(this, args);\n      lastTime = now;\n    }\n  };\n}\n"],"names":["formatDate","date","format","d","year","month","day","hours","minutes","seconds","o","formatted","k","formatTimeAgo","timestamp","diff","minute","hour","week","truncateString","str","maxLength","formatPerformanceTime","ms"],"mappings":"AAMgB,SAAAA,EAAWC,EAAqBC,EAAiB,sBAA+B,CAC9F,MAAMC,EAAI,OAAOF,GAAS,SAAW,IAAI,KAAKA,CAAI,EAAIA,EAEhDG,EAAOD,EAAE,YAAY,EACrBE,EAAQF,EAAE,SAAA,EAAa,EACvBG,EAAMH,EAAE,QAAQ,EAChBI,EAAQJ,EAAE,SAAS,EACnBK,EAAUL,EAAE,WAAW,EACvBM,EAAUN,EAAE,WAAW,EAEvBO,EAA4B,CAChC,KAAML,EACN,KAAMC,EACN,KAAMC,EACN,KAAMA,EAAQ,IAAM,GACpB,KAAMC,EACN,KAAMC,EACN,KAAM,KAAK,OAAOJ,EAAQ,GAAK,CAAC,EAChC,EAAKF,EAAE,gBAAgB,CACzB,EAEA,IAAIQ,EAAYT,EAEZ,OAAO,KAAKA,CAAM,IACRS,EAAAT,EAAO,QAAQ,OAAO,IAAKE,EAAO,IAAI,OAAO,EAAI,OAAO,GAAG,MAAM,CAAC,GAGhF,UAAWQ,KAAKF,EACV,IAAI,OAAO,IAAME,EAAI,GAAG,EAAE,KAAKD,CAAS,IAC1CA,EAAYA,EAAU,QACpB,OAAO,GACP,OAAO,GAAG,SAAW,EAAID,EAAEE,CAAC,EAAI,IAAM,KAAOF,EAAEE,CAAC,GAAG,QAAQ,GAAKF,EAAEE,CAAC,GAAG,MAAM,CAC9E,GAIG,OAAAD,CACT,CAOO,SAASE,EAAcC,EAAoC,CAC1D,MAAAb,EAAO,OAAOa,GAAc,SAAW,IAAI,KAAKA,CAAS,EAAE,QAAA,EAAYA,EAEvEC,EADM,KAAK,IAAI,EACFd,EAEbe,EAAS,GAAK,IACdC,EAAOD,EAAS,GAChBV,EAAMW,EAAO,GACbC,EAAOZ,EAAM,EACbD,EAAQC,EAAM,GACdF,EAAOE,EAAM,IAEnB,OAAIS,EAAOC,EACF,KACED,EAAOE,EACT,KAAK,MAAMF,EAAOC,CAAM,EAAI,MAC1BD,EAAOT,EACT,KAAK,MAAMS,EAAOE,CAAI,EAAI,MACxBF,EAAOG,EACT,KAAK,MAAMH,EAAOT,CAAG,EAAI,KACvBS,EAAOV,EACT,KAAK,MAAMU,EAAOG,CAAI,EAAI,KACxBH,EAAOX,EACT,KAAK,MAAMW,EAAOV,CAAK,EAAI,MAE3B,KAAK,MAAMU,EAAOX,CAAI,EAAI,IAErC,CA0BgB,SAAAe,EAAeC,EAAaC,EAAoB,GAAY,CACtE,OAACD,EACEA,EAAI,OAASC,EAAYD,EAAI,UAAU,EAAGC,CAAS,EAAI,MAAQD,EADrD,EAEnB,CAOO,SAASE,EAAsBC,EAAoB,CACxD,OAAIA,GAAM,KACAA,EAAK,KAAM,QAAQ,CAAC,EAAI,IAE3B,KAAK,MAAMA,CAAE,EAAI,IAC1B"}